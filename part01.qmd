---
title: "R の基本操作"
---


```{r}
#| echo: false
#| warning: false
#| message: false
#| include: false

library(tidyverse)
library(magick)
library(fontawesome)
```


## この資料について

* `r fa(name = "r-project")` と RStudio はインストール済み
* `r fa(name = "r-project")`における単純計算方法はできる

* [Fira Code プログラミング用等幅フォントを使っています。](https://github.com/tonsky/FiraCode)
* このフォントにより、演算子は見やすくなります

**たとえば**

* `<-` は `<` と `-` の合字 (リガチャー, ligature) です `(ALT + -)`
* `|>` は `|` と `>` の合字です `(CTRL + SHIFT + M)`
* `<=` は `<` と `=` の合字です
* `!=` は `!` と `=` の合字です

**この資料は `r version$version.string` 環境で作りました。[Quarto](https://quarto.org/) で作成しました。日本語はめちゃくちゃかもしれないので、気になるなら訂正案を送ってください。**



## 代入演算子 (assignment operator) とベクトル (vector) とは


* 代入は `=` か `<-` (`<` と `-`) です。伝統的に使われる代入は `<-` ですが、私は `=` を使っています。
* 左辺は変数名、右辺は値です。

```{r}
# 二種類の代入と c() 関数
a = 4.2
b <- 5.0
c(a, b)
```

* `c()` は渡された引数を結合します。
* `#` の後から続く文字列はコードとして実行されません。実行されない文書はコメントと呼びます。


```{r}
(a + b) * c(a, b)
```

* R はベクトル処理という実行機構が特徴的です。
* 上のコードは $(a + b) \times a$ と $(a + b) \times b$ を求めています。

RStudio の場合 `<-` は `ALT + -` のショートカットを定義しています。


## R の主なデータタイプとデータ構造

* 整数 integer
* 実数 double, numeric
* 複素数 complex number
* 時系列 time-series (POSIX)
* 文字列 character
* 論理値 logical
* 因子 factor

* ベクトル　vector
* 配列 array, matrix
* リスト list
* テーブル（データフレーム） dataframe

## データの作り方

**ベクトル**
```{r}
a = c(10.3, 20.2, 30.1)
b = c("rabbit", "cat", "mouse", "dog")
d = c(TRUE, FALSE, T)
e = factor(c("nagasaki", "kagoshima", "fukuoka"))
```

**リスト**

ベクトルの長さは異なってもいい。
ここでは、リストの要素名を指定しました。

```{r}
z1 = list("A" = a, "B"= b, "D" = d, "E" = e)
```

**データフレーム**

ベクトルの長さを揃える必要がある。
ここでは`b[1:3]`を`b`に渡すことで、変数名を指定しました。

```{r}
z2 = data.frame(a, b = b[1:3], d, e)
```

## リストの構造を確認しよう

Rオブジェクトの構造 (structure) は `str()` で確認します。

```{r}
str(z1)
```


## リストからデータを抽出する

リストの要素は次のように抽出できます。

```{r}
z1$A
```

リストからの抽出方法は `$` 以外に, `[` や `[[` でもできます。

```{r, eval = FALSE}
z1[c("A", "D")]
z1[c(1,4)]
z1[[2]]
z1[[c(2,3)]]
z1[[2]][c(1,2)]
```

---

## データフレームの構造を確認しよう

```{r}
str(z2)
```

リストと似ていますが、そもそもデータフレームはリストです。
つまり、リストと同じように操作できます。


```{r}
z2$a
```

```{r, eval = FALSE}
z2[c("a", "d")]
z2[c(1, 4)]
z2[[2]]
z2[[c(2,3)]]
z2[[2]][c(1,2)]
```

## 比較演算


* 比較に使う論理演算子：`&`（論理積 AND）, `|` （論理和 OR）, `!`（否定 NOT）

```{r}
A = c(5, 3, 2)
B = c(5, 2, 1)

# 論理積
(A[1] > B[1]) & (A[1] == B[1])
# 論理和
(A[1] > B[1]) | (A[1] == B[1])
```


```{r}
# 否定と論理積
!(A[1] > B[1]) & (A[1] == B[1])

# 否定と論理和
(A[1] < B[2]) | !(A[1] == B[1])
```

## 比較演算を使ったデータの抽出


```{r}
a = c(10.3, 20.2, 30.1)
b = c("rabbit", "cat", "mouse")
d = c(TRUE, FALSE, T)
e = factor(c("nagasaki", 
             "kagoshima", 
             "fukuoka"))
Z = data.frame(a, b, d, e)
Z[Z$a > 20, ]
```

```{r}
Z[Z$a > 10 & Z$a < 20.2, ]
Z[Z$a > 10 & Z$a <= 20.2, ]
Z[identical(Z$a, 20) | !Z$d, ]
```


## **重要!** 数値を比較について

パソコンは 2 進数で計算しているので、数値は正確ではない！

**たとえば：**

```{r}
0.2 * 0.2 / 0.2 == 0.2 # = と =
```

数値の比較をする場合は `all.equal()` を使いましょう。

```{r}
all.equal(0.2 * 0.2 / 0.2, 0.2, tolerance = 0) # 上のコードと同じ
all.equal(0.2 * 0.2 / 0.2, 0.2, tolerance = .Machine$double.eps) # 機械誤差を考慮した比較
```

* ちなみに比較用記号は `<`, `>`, `>=` (`>` と `=`), `<=` (`<` と `=`), `!=` (`!` と `=`), `==` (`=` と `=`)　です。

