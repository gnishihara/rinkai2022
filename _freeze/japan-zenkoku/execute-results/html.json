{
  "hash": "11b4aa9eada58bbe5587962939cc53b7",
  "result": {
    "markdown": "---\ntitle: \"全国の地図\"\nformat: \n  html:\n    html-math-method: katex\nreference-location: margin\ncitation-location: margin\nbibliography: references.bib\n---\n\n\n\n\n## 必要なパッケージ\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)　# Essential package\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.4.0 \n✔ readr   2.1.2      ✔ forcats 0.5.1 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggpubr)     # Publication-oriented figures\nlibrary(kableExtra) # Tables\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n```\n:::\n\n```{.r .cell-code}\nlibrary(magick)     # Imagemagick R API\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to ImageMagick 6.9.11.60\nEnabled features: fontconfig, freetype, fftw, heic, lcms, pango, webp, x11\nDisabled features: cairo, ghostscript, raw, rsvg\nUsing 32 threads\n```\n:::\n\n```{.r .cell-code}\nlibrary(patchwork)  # Simplified figure tiling\nlibrary(ggspatial)  # Essential for map-making with ggplot\nlibrary(sf)         # Essential for map data manipulation\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.9.0, GDAL 3.2.2, PROJ 7.2.1; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(showtext)   # I want to use google fonts in the figures\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sysfonts\nLoading required package: showtextdb\n```\n:::\n\n```{.r .cell-code}\nlibrary(mapdata)    # Rough maps\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: maps\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggsflabel)  # Map labelling functions\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'ggsflabel'\n\nThe following objects are masked from 'package:ggplot2':\n\n    geom_sf_label, geom_sf_text, StatSfCoordinates\n```\n:::\n:::\n\n\nNoto Sans のフォントが好きなので、ここで [Google Fonts](https://fonts.google.com/) からアクセスします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add_google(\"Noto Sans JP\", \"notosans-jp\") # Japanese sans-serif font\nfont_add_google(\"Noto Sans\", \"notosans\")       # English sans-serif font\n```\n:::\n\n\nNoto Fonts 類のフォントは研究室のサーバにインストール済みなので、次のコードで準備する。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add(\"notosans-jp\", \n         regular = \"NotoSansCJKjp-Regular.otf\",\n         bold = \"NotoSansCJKjp-Bold.otf\")\nfont_add(\"notosans\", \n         regular = \"NotoSans-Regular.ttf\",\n         bold = \"NotoSans-Bold.ttf\",\n         bolditalic = \"NotoSans-BoldItalic.ttf\",\n         italic = \"NotoSans-Italic.ttf\")\n```\n:::\n\n\nサーバにインストールされているフォント名の検索は次のコードでできます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_files() |> as_tibble() |> \n  select(file, family, face, ps_name) |> \n  filter(str_detect(ps_name, \"NotoSans-[Reg|Bold|Ital]|NotoSansCJKjp\")) |> \n  print(n = 50)\n```\n:::\n\n\n\n`ggplot` のデフォルトテーマも設定し、フォント埋め込みも可能にします。\nここでデフォルトを設定すると、毎回 `theme_pubr()` を `ggplot`のチェインにたさなくていい。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_pubr(base_size = 10, base_family = \"notosans-jp\") |> theme_set()\nshowtext_auto() # Automatically embed the Noto Sans fonts into the ggplots.\n```\n:::\n\n\n\n## シェープファイルの読み込み\n\nシェープファイル (shapefile) は地図データのことです。\n基本的の拡張子は `shp`, `shx`, `dbf`　ですが、その他に `prj` と `xml` もあります。\n\n研究室用にダウンロードした [国土交通省・国土数値情報ダウンロードサービス](https://nlftp.mlit.go.jp/ksj/index.html) のシェープファイルは `~/Lab_Data/Japan_map_data/Japan` に入っています。\n\nところが、情報量が多くて全国の地図には適していません。\nとてもおもいです。\nここでは、`mapdata` の地図データを用います。\nまずはデータを `SpatialPolygon` に変換し、CRS を JGD2011 に設定します。\n\nCRSには **地理座標系** と **投影座標系** の2種類があります。\n座標系にはEPSGコードもつけられています。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# HTML 用テーブル\ntibble(`EPSG Code` = c(4326,6668,6677),\n       `CRS` = c(\"WGS84\", \"JGD2011\", \"JGD2011 / Japan Plane Rectangular CS IX\"),\n       `Units` = c(\"degrees\", \"degrees\", \"meters\")) |> \n  kbl() |> \n  kable_styling(bootstrap_options = c(\"hover\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> EPSG Code </th>\n   <th style=\"text-align:left;\"> CRS </th>\n   <th style=\"text-align:left;\"> Units </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 4326 </td>\n   <td style=\"text-align:left;\"> WGS84 </td>\n   <td style=\"text-align:left;\"> degrees </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6668 </td>\n   <td style=\"text-align:left;\"> JGD2011 </td>\n   <td style=\"text-align:left;\"> degrees </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6677 </td>\n   <td style=\"text-align:left;\"> JGD2011 / Japan Plane Rectangular CS IX </td>\n   <td style=\"text-align:left;\"> meters </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n`maps` パッケージから地図を準備する。\n\n\n::: {.cell}\n\n```{.r .cell-code}\njpn = map(\"japan\", fill = TRUE, plot = FALSE)\n```\n:::\n\n\nデータを ポリゴンに変換し、CRSを適応する。\n\n\n::: {.cell}\n\n```{.r .cell-code}\njpn = maptools::map2SpatialPolygons(jpn, IDs = jpn$names)\njpn = jpn |> st_as_sf() |> st_set_crs(6668)\n```\n:::\n\n\nポリゴンの解像度を減らす。\n\n\n::: {.cell}\n\n```{.r .cell-code}\njpn = jpn |> \n  rmapshaper::ms_simplify(keep = 0.04, keep_shapes = F) |>\n  st_union()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'geojsonlint':\n  method         from \n  print.location dplyr\n```\n:::\n:::\n\n\n地図データを確認する。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor = RColorBrewer::brewer.pal(9, \"Blues\")[2]\njpn |> \n  ggplot() + geom_sf() + \n  theme(panel.background = element_rect(fill = color),\n        panel.grid.major = element_line(color = \"white\", size = 0.5))\n```\n\n::: {.cell-output-display}\n![](japan-zenkoku_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n地図の座標を UTM (Universal Transverse Mercator) に変換する。\n\n::: {.cell}\n\n```{.r .cell-code}\njpn |> \n  st_transform(\"+proj=utm +zone=54 +datum=WGS84 +units=km\") %>% \n  ggplot() + \n  geom_sf(color = NA, fill = \"black\") + \n  theme(panel.background = element_rect(fill = color),\n        panel.grid.major = element_line(color = \"white\", size = 0.5))\n```\n\n::: {.cell-output-display}\n![](japan-zenkoku_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## 公開用地図の作成\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfudai       = c(40.04152543512538, 141.90348502302353)\nhirota      = c(39.02402594131857, 141.78725806724896)\nmatsushima  = c(38.34549669653925, 141.0807915733725)\nmie         = c(34.50235994784464, 136.85048430773975)\nnaruto      = c(34.22374792321184, 134.60913287860734)\nkamigoto    = c(32.98827976845565, 129.11838896005543)\ntokunoshima = c(27.763718381600228, 128.97442879693742)\nkaturen     = c(26.297604704320968, 127.8515917134318)\nchinen      = c(26.175546599376673, 127.83566562706314)\nishigaki    = c(24.380846276132317, 124.17950044492075)\nokinawa     = c(26.297604704320968, 127.8515917134318)\nupper       = c(33.94130434786708, 130.16535814817098)\nlower       = c(28.354532974308754, 129.78718537187962)\n```\n:::\n\n\n\nGPS データの tibble と 座標を準備する。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngps_info = rbind(fudai, hirota, matsushima, mie, naruto, kamigoto, tokunoshima,\n                 okinawa, ishigaki) |> \n  as_tibble(.name_repair = ~c(\"lat\", \"long\")) |> \n  mutate(label = \n           factor(c(\"Fudai\", \"Hirota\", \"Matsushima\", \n                    \"Mie\", \"Naruto\", \"Kamigoto\", \n                    \"Tokunoshima\", \"Okinawa (Chinen and Katsuren)\", \"Ishigaki\")))\n\ngps_info = gps_info |> mutate(label2 = str_to_sentence(label)) \ngps_info = gps_info |> st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(jpn))\n```\n:::\n\n\nここで作図をします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(fill = \"grey50\", data = jpn, size = 0) +\n  geom_sf_text_repel(aes(label = label), \n               data = gps_info,\n               color = \"black\",\n               family = \"notosans\", \n               fontface = \"bold\",\n               seed = 2020,\n               vjust   = c(1,1,1,\n                           1,1,0,\n                           1,1,1), \n               hjust   = c(0,0,0,\n                           0,0,1,\n                           0,0,0),\n               nudge_x = c(1, 1, 0.5,\n                           1, 1,-0.5,\n                           1, 1, 1),\n               nudge_y = c( 1, 1, -1,\n                           -1,-1, 1,\n                            1, 1, 1),\n               size = 5)  + \n  geom_sf(data = gps_info, size = 3) +\n  geom_sf(data = gps_info, size = 2, color = \"white\") +\n  coord_sf(crs = 6668) +\n  theme(panel.background = element_rect(fill = \"lightblue\", color =NA),\n        panel.border  = element_rect(fill = NA, color =NA),\n        plot.background =  element_rect(fill = \"lightblue\", color =NA),\n        axis.title = element_blank(),\n        axis.line = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in st_point_on_surface.sfc(data$geometry): st_point_on_surface may not\ngive correct results for longitude/latitude data\n```\n:::\n\n::: {.cell-output-display}\n![](japan-zenkoku_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "japan-zenkoku_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}