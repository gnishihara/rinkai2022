{
  "hash": "2c7d57cc68d41e6c1350a9f1388ecc9c",
  "result": {
    "markdown": "---\ntitle: \"送風距離の求め方\"\nformat: \n  html:\n    html-math-method: katex\nreference-location: margin\ncitation-location: margin\nbibliography: references.bib\n---\n\n\n海藻は沿岸域における波あたりの強さによって、種数と主構成が変わります[@Nishihara2011]。\n波あたりは外界に面した開放性の評価、生物の分布を用いた評価 (biological exposure scale, Burrows et al. [@Burrows2008]、\n地図を用いて方位ごとの対岸距離 (fetch) を求める、観測機器を設置して波あたりの力や波高などの観測が主な評価方法です[@Ohgaki2009]。\n\nここでは、fetch, とくに wind fetch （送風距離）の評価方法を消化します。\n波あたりの強さを、生物の分布を用いて評価した場合、波あたりと生物の関係の説明は循環論になります。\n\n送風距離の関数は [`blasee/fetchR`](https://github.com/blasee/fetchR) を参考にしました。\n\n\n## 必要なパッケージ\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.4.0 \n✔ readr   2.1.2      ✔ forcats 0.5.1 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggpubr)\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.9.0, GDAL 3.2.2, PROJ 7.2.1; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(magick)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to ImageMagick 6.9.11.60\nEnabled features: fontconfig, freetype, fftw, heic, lcms, pango, webp, x11\nDisabled features: cairo, ghostscript, raw, rsvg\nUsing 32 threads\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggrepel)\nlibrary(showtext)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sysfonts\nLoading required package: showtextdb\n```\n:::\n\n```{.r .cell-code}\nlibrary(patchwork)\n```\n:::\n\n\n## 送風距離関数の定義\n\n詳細の原因はわかりませんが、`fetchR` の関数は国土交通省・国土数値情報\nのシェープファイルと合わなかったので、ここで再定義しています。\n\n最大円は `calc_circle()` で求めます。\n`map_layer` に起点の `sf` オブジェクトを渡します。\n`max_dist` に最大円の半径を渡します。このときの他には km です。\n`n_vectors` は象限あたりの方位の数です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_circle = function(map_layer, max_dist = 30, n_vectors = 9) {\n  # Calculate the fetch limits.\n  # max_dist in kilometers\n  delta_theta =  360 / (n_vectors * 4)\n  theta = seq(0, 360, by = delta_theta)\n  n = length(theta)\n  theta = theta[-n]\n  max_dist = units::set_units(1000*max_dist, \"m\")\n  fetch_circle = st_buffer(map_layer, dist = max_dist, nQuadSegs = n_vectors) \n  fetch_limits = st_coordinates(fetch_circle)\n  fetch_limits = fetch_limits[-n, ]\n  list(fetch_circle = fetch_circle, fetch_limits = as_tibble(fetch_limits[order(theta), ]) )\n}\n```\n:::\n\n\n\n`calc_intersection()` は起点からフェッチの最大円まで直線を引きます。\n最大円内に交差したポリゴンの交差点を特定し、起点に一番近い交差点を返します。\n交差点が内場合は、最大円までの距離を返します。\nこれらの関数は `tidyverse` や `sf` が必要です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_intersection = function(fetch_limit, origin, map_layer) {\n  X = rbind(st_coordinates(origin), fetch_limit) |> as.matrix()\n  fetch_vector = st_linestring(X) |> st_sfc(crs = st_crs(map_layer))\n  fetch_intersection = st_intersection(fetch_vector, map_layer) |> st_cast(\"POINT\")\n  if(length(fetch_intersection) > 0) {\n    intersection_coordinate  = st_coordinates(fetch_intersection) |> as.matrix()\n    distance_from_origin = st_distance(origin, fetch_intersection) |> as.vector()\n    closest_intersection = min(distance_from_origin)\n    n = which(near(distance_from_origin, closest_intersection)) \n    intersection_coordinate = intersection_coordinate[n,]\n  } else {\n    intersection_coordinate  = st_point(as.matrix(fetch_limit)) |> st_sfc(crs = st_crs(map_layer))\n    distance_from_origin = st_distance(origin, intersection_coordinate) |> as.vector()\n    closest_intersection = distance_from_origin\n    intersection_coordinate = st_coordinates(intersection_coordinate) |> as.matrix()\n  }\n  X = matrix(c(st_coordinates(origin), intersection_coordinate[1:2]), ncol = 2, byrow =T)\n  fetch_vector = st_linestring(X) |> st_sfc(crs = st_crs(map_layer))\n  fetch_length = st_length(fetch_vector) \n  fetch_vector |> st_as_sf() |> mutate(length = fetch_length)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n################################################################################\n# Prepare data set #############################################################\n# GPS coordinates to determine wind fetch ######################################\nmatsushimagps = c(38.34549669653925, 141.0807915733725)\nhirotagps     = c(39.02402594131857, 141.78725806724896)\nbisegps       = c(26.704302654710496, 127.85974269102186)\narikawagps    = c(32.98827976845565, 129.11838896005543)\ntainouragps   = c(32.95134175383013, 129.1096027426365)\nomuragps      = c(32+52/60+11.9/60/60, 129+58/60+24.5/60/60)\n\ngps_info = rbind(matsushimagps, hirotagps, bisegps, arikawagps, tainouragps, omuragps) |> \n  as_tibble(.name_repair = ~c(\"lat\", \"long\")) |> \n  mutate(name = c(\"matsushimagps\", \"hirotagps\", \n                  \"bisegps\", \"arikawagps\", \"tainouragps\", \"omuragps\")) |> \n  mutate(label = str_to_sentence(str_remove(name, pattern = \"(gps)\"))) \n\ngps_info = gps_info |> \n  mutate(label2 = str_to_sentence(label)) |> \n  mutate(label2 = str_glue(\"{label2} {ifelse(str_detect(label2, 'Bise'), 'Point', 'Bay')}\"))\n\n# Prepare the Coordinate Reference System to be EPSG:4326 (Which is WGS 84)\n# See st_crs(4326) for details\ngps_info = gps_info |> select(long, lat, name) |> st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326, agr = \"constant\")\n\n# Load the map shape files #####################################################\n# The map uses the ITRF94 system (st_crs(map_poly))\n# gsi_low = read_sf(\"~/Lab_Data/Japan_map_data/GSI/coastl_jpn.shp\")\n# gsi_low = read_sf(\"~/Lab_Data/Japan_map_data/GADM_old/JPN_adm1.shp\")\nmap_poly = read_sf(\"~/Lab_Data/Japan_map_data/GSI/polbnda_jpn.shp\")\nmap_poly = map_poly |> select(nam, geometry)\n\n# Convert the CRS to EPSG:2450 #################################################\nmap_poly = st_transform(map_poly, st_crs(2450))\ngps_info  = st_transform(gps_info, st_crs(2450))\n\n################################################################################\n# Do the analysis one location at a time. ######################################\nptsize = 1\nmax_dist = 10 # In km\nn_vectors = 3*9 # The number of vectors in every quadrant.\n\nlocation = \"Hirota Bay\"\npolygon_layer = subset(map_poly, str_detect(nam, \"Iwate\")) |> st_union() \nsite_layer    = subset(gps_info, str_detect(name, \"hiro\"))\nfetch_limits = calc_circle(site_layer, max_dist = max_dist, n_vectors = n_vectors)\nfout = fetch_limits$fetch_limits |> \n  mutate(fe  = map2(X,Y,function(x,y) cbind(x,y))) |> \n  mutate(geometry = map(fe, calc_intersection, origin = site_layer, map_layer = polygon_layer))\nfout = fout |> select(geometry) |>  unnest(geometry) |> st_as_sf()\ntemp_layer = st_crop(polygon_layer, st_bbox(fetch_limits$fetch_circle))\nmean_fetch = fout |> pull(length) |> mean() |> as.numeric()\nsd_fetch = fout |> pull(length) |> sd() |> as.numeric()\nmax_fetch = fout |> pull(length) |> as.numeric()\nman_n = sum(near(max_fetch, max_dist * 1000))\ntot_n = length(max_fetch)\n\np1 = ggplot() + \n  geom_sf(data = temp_layer, color = NA) +\n  geom_sf(data = fout) +\n  geom_sf(data = site_layer, color = \"red\", size = ptsize) +\n  labs(title = str_glue(\"The mean ± sd fetch for {location} is {format(mean_fetch, digits = 4)} ± {format(sd_fetch, digits = 4)} m.\"),\n       subtitle = str_glue(\"{man_n} out of {tot_n} vectors were at the upper limit.\"))\n\nlocation = \"Matsushima Bay\"\npolygon_layer = subset(map_poly, str_detect(nam, \"Miyag\")) |> st_union() \nsite_layer    = subset(gps_info, str_detect(name, \"matsu\"))\nfetch_limits = calc_circle(site_layer, max_dist = max_dist, n_vectors = n_vectors)\nfout = fetch_limits$fetch_limits |> as_tibble() |> \n  mutate(fe  = map2(X,Y,function(x,y) cbind(x,y))) |> \n  mutate(geometry = map(fe, calc_intersection, origin = site_layer, map_layer = polygon_layer))\nfout = fout |> select(geometry) |>  unnest(geometry) |> st_as_sf()\ntemp_layer = st_crop(polygon_layer, st_bbox(fetch_limits$fetch_circle))\nmean_fetch = fout |> pull(length) |> mean() |> as.numeric()\nsd_fetch = fout |> pull(length) |> sd() |> as.numeric()\nmax_fetch = fout |> pull(length) |> as.numeric()\nman_n = sum(near(max_fetch, max_dist * 1000))\ntot_n = length(max_fetch)\n\np2 = ggplot() + \n  geom_sf(data = temp_layer, color = NA) +\n  geom_sf(data = fout) +\n  geom_sf(data = site_layer, color = \"red\", size = ptsize) +\n  labs(title = str_glue(\"The mean ± sd fetch for {location} is {format(mean_fetch, digits = 4)} ± {format(sd_fetch, digits = 4)} m.\"),\n       subtitle = str_glue(\"{man_n} out of {tot_n} vectors were at the upper limit.\"))\n\nlocation = \"Bise Point\"\npolygon_layer = subset(map_poly, str_detect(nam, \"Okinawa\")) |> st_union() \nsite_layer    = subset(gps_info, str_detect(name, \"bise\"))\nfetch_limits = calc_circle(site_layer, max_dist = max_dist, n_vectors = n_vectors)\nfout = fetch_limits$fetch_limits |> as_tibble() |> \n  mutate(fe  = map2(X,Y,function(x,y) cbind(x,y))) |> \n  mutate(geometry = map(fe, calc_intersection, origin = site_layer, map_layer = polygon_layer))\nfout = fout |> select(geometry) |>  unnest(geometry) |> st_as_sf()\ntemp_layer = st_crop(polygon_layer, st_bbox(fetch_limits$fetch_circle))\nmean_fetch = fout |> pull(length) |> mean() |> as.numeric()\nsd_fetch = fout |> pull(length) |> sd() |> as.numeric()\nmax_fetch = fout |> pull(length) |> as.numeric()\nman_n = sum(near(max_fetch, max_dist * 1000))\ntot_n = length(max_fetch)\n\np3 = ggplot() + \n  geom_sf(data = temp_layer, color = NA) +\n  geom_sf(data = fout) +\n  geom_sf(data = site_layer, color = \"red\", size = ptsize) +\n  labs(title = str_glue(\"The mean ± sd fetch for {location} is {format(mean_fetch, digits = 4)} ± {format(sd_fetch, digits = 4)} m.\"),\n       subtitle = str_glue(\"{man_n} out of {tot_n} vectors were at the upper limit.\"))\n\nlocation = \"Omura Bay\"\npolygon_layer = subset(map_poly, str_detect(nam, \"Nagasaki\")) |> st_union() \nsite_layer    = subset(gps_info, str_detect(name, \"omura\"))\nfetch_limits = calc_circle(site_layer, max_dist = max_dist, n_vectors = n_vectors)\nfout = fetch_limits$fetch_limits |> as_tibble() |> \n  mutate(fe  = map2(X,Y,function(x,y) cbind(x,y))) |> \n  mutate(geometry = map(fe, calc_intersection, origin = site_layer, map_layer = polygon_layer))\nfout = fout |> select(geometry) |>  unnest(geometry) |> st_as_sf()\ntemp_layer = st_crop(polygon_layer, st_bbox(fetch_limits$fetch_circle))\nmean_fetch = fout |> pull(length) |> mean() |> as.numeric()\nsd_fetch = fout |> pull(length) |> sd() |> as.numeric()\nmax_fetch = fout |> pull(length) |> as.numeric()\nman_n = sum(near(max_fetch, max_dist * 1000))\ntot_n = length(max_fetch)\n\np4 = ggplot() + \n  geom_sf(data = temp_layer, color = NA) +\n  geom_sf(data = fout) +\n  geom_sf(data = site_layer, color = \"red\", size = ptsize) +\n  labs(title = str_glue(\"The mean ± sd fetch for {location} is {format(mean_fetch, digits = 4)} ± {format(sd_fetch, digits = 4)} m.\"),\n       subtitle = str_glue(\"{man_n} out of {tot_n} vectors were at the upper limit.\"))\n\nlocation = \"Arikawa Bay\"\npolygon_layer = subset(map_poly, str_detect(nam, \"Nagasaki\")) |> st_union() \nsite_layer    = subset(gps_info, str_detect(name, \"arik\"))\nfetch_limits = calc_circle(site_layer, max_dist = max_dist, n_vectors = n_vectors)\nfout = fetch_limits$fetch_limits |> as_tibble() |> \n  mutate(fe  = map2(X,Y,function(x,y) cbind(x,y))) |> \n  mutate(geometry = map(fe, calc_intersection, origin = site_layer, map_layer = polygon_layer))\nfout = fout |> select(geometry) |>  unnest(geometry) |> st_as_sf()\ntemp_layer = st_crop(polygon_layer, st_bbox(fetch_limits$fetch_circle))\nmean_fetch = fout |> pull(length) |> mean() |> as.numeric()\nsd_fetch = fout |> pull(length) |> sd() |> as.numeric()\n\nmax_fetch = fout |> pull(length) |> as.numeric()\nman_n = sum(near(max_fetch, max_dist * 1000))\ntot_n = length(max_fetch)\n\np5 = ggplot() + \n  geom_sf(data = temp_layer, color = NA) +\n  geom_sf(data = fout) +\n  geom_sf(data = site_layer, color = \"red\", size = ptsize) +\n  labs(title = str_glue(\"The mean ± sd fetch for {location} is {format(mean_fetch, digits = 4)} ± {format(sd_fetch, digits = 4)} m.\"),\n       subtitle = str_glue(\"{man_n} out of {tot_n} vectors were at the upper limit.\"))\n\nlocation = \"Tainoura Bay\"\npolygon_layer = subset(map_poly, str_detect(nam, \"Nagasaki\")) |> st_union() \nsite_layer    = subset(gps_info, str_detect(name, \"tain\"))\nfetch_limits = calc_circle(site_layer, max_dist = max_dist, n_vectors = n_vectors)\nfout = fetch_limits$fetch_limits |> as_tibble() |> \n  mutate(fe  = map2(X,Y,function(x,y) cbind(x,y))) |> \n  mutate(geometry = map(fe, calc_intersection, origin = site_layer, map_layer = polygon_layer))\nfout = fout |> select(geometry) |>  unnest(geometry) |> st_as_sf()\ntemp_layer = st_crop(polygon_layer, st_bbox(fetch_limits$fetch_circle))\nmean_fetch = fout |> pull(length) |> mean() |> as.numeric()\nsd_fetch = fout |> pull(length) |> sd() |> as.numeric()\n\nmax_fetch = fout |> pull(length) |> as.numeric()\nman_n = sum(near(max_fetch, max_dist * 1000))\ntot_n = length(max_fetch)\n\np6 = ggplot() + \n  geom_sf(data = temp_layer, color = NA) +\n  geom_sf(data = fout) +\n  geom_sf(data = site_layer, color = \"red\", size = ptsize) +\n  labs(title = str_glue(\"The mean ± sd fetch for {location} is {format(mean_fetch, digits = 4)} ± {format(sd_fetch, digits = 4)} m.\"),\n       subtitle = str_glue(\"{man_n} out of {tot_n} vectors were at the upper limit.\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(p1 + p2 + p3) / (p4 + p5 + p6)\n```\n\n::: {.cell-output-display}\n![](windfetch_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npdfname = \"~/Downloads/Determine_fetch.pdf\"\npngname = str_replace(pdfname, \"pdf\", \"png\")\nggsave(pdfname, width = 5*80, height = 4*80, units = \"mm\")\nimg = image_read(pdfname, density = 300)\nimg |> image_write(pngname, format = \"png\")\n```\n:::",
    "supporting": [
      "windfetch_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}