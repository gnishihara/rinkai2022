{
  "hash": "91a9bc2b4653fbc60735daed2b37a5f5",
  "result": {
    "markdown": "---\ntitle: \"R 関数の基本\"\n---\n\n\n# R 関数の基本\n\n関数をつくることにより、`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} での作業がとても楽になります。\nコードを繰り返して使うなら関数をつくりましょう。\n\n\n## 関数の作り方\n\n**R の関数に 2 つのパーツがあります。**\n\n* **Arguments**: 引数\n* **Code block**: 関数のコードは `{}` の間に納めます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhello = function(x) {\n  if(!is.character(x)) {\n    stop(\"Please provide a character string.\")\n  }\n  sprintf(\"Hello %s!\", x)\n}\n\nhello(214)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in hello(214): Please provide a character string.\n```\n:::\n\n```{.r .cell-code}\nhello(\"Yukio\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello Yukio!\"\n```\n:::\n:::\n\n\n\n## 関数のスコープ (scope)（１）\n\n関数の中に作ったものは、関数の中にしか存在しない。\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsumofsquare = function(x) {\n  ss = (x - mean(x))^2 # 関数の外から見れない\n  ssq = sum(ss) # 関数の外から見れない\n  ssq # 関数の外に返す\n}\ndata = sample(1:10, 5, replace = TRUE)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7  6 10  7  4\n```\n:::\n\n```{.r .cell-code}\nvalue = sumofsquare(data)\nvalue\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18.8\n```\n:::\n:::\n\n\n\n## 関数のスコープ (scope)（２）\n\nところが、関数は外の環境に存在するものは見れます。\nこのように関数を作ると、バグを起こしやすいので、注意。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumofsquare = function(x) {\n  ss = (s - mean(s))^2 # s は関数の外にあるが、関数の引数ではない\n  ssq = sum(ss) # 関数の外から見れない\n  ssq # 関数の外に返す\n}\ns = sample(100:1000, 5, replace = TRUE)\ns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 169 291 862 713 721\n```\n:::\n\n```{.r .cell-code}\ndata = sample(1:10, 5, replace = TRUE)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 7 9 7 3\n```\n:::\n\n```{.r .cell-code}\nvalue = sumofsquare(data)\nvalue　# これは s の平方和です。\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 365388.8\n```\n:::\n:::\n\n\n\n## 諸略した関数の書き方と無名関数 (anonymous function)\n\n関数は次のようにもかけます。\n`\\(x){...}` はラムダ式 (lambda expression) とも呼ばれています。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_one = \\(x) { x + 1}\nadd_one(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\n無名関数をつくるときに便利な書き方です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# どちれも無名関数ですが、２つ目の関数がはラムダ式です。\nz = 1:5\nsapply(z, FUN = function(s){s^2})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  9 16 25\n```\n:::\n\n```{.r .cell-code}\nsapply(z, FUN = \\(s){s^2})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  9 16 25\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}