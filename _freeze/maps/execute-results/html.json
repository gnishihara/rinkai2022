{
  "hash": "d253c51eb63e1b9e7ca15d7746308b68",
  "result": {
    "markdown": "---\ntitle: \"地図の作り方\"\nformat: \n  html:\n    html-math-method: katex\nreference-location: margin\ncitation-location: margin\nbibliography: references.bib\n---\n\n::: {.cell}\n\n:::\n\n\n## 必要なパッケージ\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-2_e50a0d58cb61593cf366f0f4248983a7'}\n\n```{.r .cell-code}\nlibrary(tidyverse)　# Essential package\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.4.0 \n✔ readr   2.1.2      ✔ forcats 0.5.1 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggpubr)     # Publication-oriented figures\nlibrary(kableExtra) # Tables\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n```\n:::\n\n```{.r .cell-code}\nlibrary(magick)     # Imagemagick R API\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to ImageMagick 6.9.11.60\nEnabled features: fontconfig, freetype, fftw, heic, lcms, pango, webp, x11\nDisabled features: cairo, ghostscript, raw, rsvg\nUsing 32 threads\n```\n:::\n\n```{.r .cell-code}\nlibrary(patchwork)  # Simplified figure tiling\nlibrary(showtext)   # I want to use google fonts in the figures\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sysfonts\nLoading required package: showtextdb\n```\n:::\n:::\n\n\n\n次の2つは地図専用のパッケージです。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-3_6eaab67aa6dcb58e8bbd057fb5bacc12'}\n\n```{.r .cell-code}\nlibrary(ggspatial)  # Essential for map-making with ggplot\nlibrary(sf)         # Essential for map data manipulation\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.9.0, GDAL 3.2.2, PROJ 7.2.1; sf_use_s2() is TRUE\n```\n:::\n:::\n\n\nNoto Sans のフォントが好きなので、ここで [Google Fonts](https://fonts.google.com/) からアクセスします。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-4_0680e78b76f3e4d68e14ea674e877f19'}\n\n```{.r .cell-code}\nfont_add_google(\"Noto Sans\",\"notosans\")\n```\n:::\n\n\n`ggplot` のデフォルトテーマも設定し、フォント埋め込みも可能にします。\nここでデフォルトを設定すると、毎回 `theme_pubr()` を `ggplot`のチェインにたさなくていい。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-5_912ed1125295a8168a5270be94455142'}\n\n```{.r .cell-code}\ntheme_pubr(base_size = 10, base_family = \"notosans\") |> theme_set()\nshowtext_auto() # Automatically embed the Noto Sans fonts into the ggplots.\n```\n:::\n\n\n## シェープファイルの読み込み\n\nシェープファイル (shapefile) は地図データのことです。\n基本的の拡張子は `shp`, `shx`, `dbf`　ですが、その他に `prj` と `xml` もあります。\n\n研究室用にダウンロードした [国土交通省・国土数値情報ダウンロードサービス](https://nlftp.mlit.go.jp/ksj/index.html) のシェープファイルは `~/Lab_Data/Japan_map_data/Japan` に入っています。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-6_0f9d20d927e0c23454eb4af53f881a68'}\n\n```{.r .cell-code}\nmlit = read_sf(\"~/Lab_Data/Japan_map_data/Japan/N03-20210101_GML/\")\n```\n:::\n\n\n`mlit` に読み込んだシェープファイルは[ここへ](https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-v3_0.html)。\n\nシェープファイルの 座標参照系 (CRS: Coordinate Reference System) を確認しましょう。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-7_a1e18273eb2d9da7a71063d4aa92f513'}\n\n```{.r .cell-code}\nst_crs(mlit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: JGD2011 \n  wkt:\nGEOGCRS[\"JGD2011\",\n    DATUM[\"Japanese Geodetic Datum 2011\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"Japan - onshore and offshore.\"],\n        BBOX[17.09,122.38,46.05,157.65]],\n    ID[\"EPSG\",6668]]\n```\n:::\n:::\n\n\nCRSには **地理座標系** と **投影座標系** の2種類があります。\n座標系にはEPSGコードもつけられています。\n\n\n::: {.cell hash='maps_cache/html/crs_0f82d80a88da033c36599db5342efd0d'}\n\n```{.r .cell-code}\n# HTML 用テーブル\ntibble(`EPSG Code` = c(4326,6668,6677),\n       `CRS` = c(\"WGS84\", \"JGD2011\", \"JGD2011 / Japan Plane Rectangular CS IX\"),\n       `Units` = c(\"degrees\", \"degrees\", \"meters\")) |> \n  kbl() |> \n  kable_styling(bootstrap_options = c(\"hover\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> EPSG Code </th>\n   <th style=\"text-align:left;\"> CRS </th>\n   <th style=\"text-align:left;\"> Units </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 4326 </td>\n   <td style=\"text-align:left;\"> WGS84 </td>\n   <td style=\"text-align:left;\"> degrees </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6668 </td>\n   <td style=\"text-align:left;\"> JGD2011 </td>\n   <td style=\"text-align:left;\"> degrees </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6677 </td>\n   <td style=\"text-align:left;\"> JGD2011 / Japan Plane Rectangular CS IX </td>\n   <td style=\"text-align:left;\"> meters </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nこのデータは政策区域のデータなので、とても重いです。\nまずは、都道府県ごとにまとめた `RDS` ファイルを作って保存します。\n都道府県ごとに `st_union()` を使って `polgyon` データを結合します。\n結合したデータを unnest して、simple feature に戻してかた保存します。\n121158 features もあるので、数時間もかります。\n\n沿岸のデータだけなら軽いですので、`C23` シリーズのファイルを読み込みます。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-8_bee6b08aae91d5c8fd1c1f56c8193d10'}\n\n```{.r .cell-code}\nmlit = tibble(folder = dir(\"~/Lab_Data/Japan_map_data/Coastline/\", full = TRUE)) |> \n  mutate(data = map(folder, read_sf)) |> select(data) |> \n  unnest(data) |> \n  st_as_sf(crs = st_crs(6668))\n```\n:::\n\n\nでは、ここで地図の確認をします。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-9_b1b608d6b030c2b5a45285a8b01ef712'}\n\n```{.r .cell-code}\nmlit |> ggplot() + geom_sf()\n```\n\n::: {.cell-output-display}\n![](maps_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n`mlit` のデータは細かい政策区域まで分けられているので、全国スケールの図には向いていません。\n`st_union()` をつかって、都道府県ごとに polygon を結合したファイルは、`~/Lab_Data/Japan_map_data/Japan/todofuken.rds` に保存しています。\n次のコードで、都道府県ごとにまとめましたが、並列処理でも５時間以上もかかったので、`RDS` ファイルを使いましょう。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-10_9168a9cb7b9309ca776969d5eaacc102'}\n\n```{.r .cell-code}\n# Takes 5.5 hours to complete with 30 cores!\n# library(furrr)\n# plan(multisession, workers = 30)\n# Group by prefecture\n# mlit1 = mlit |> group_nest(N03_001) |> \n#   # mutate(data = future_map(data, st_union)) |> \n#   unnest(data) |> st_as_sf() \n# mlit1 |> write_rds(\"~/Lab_Data/Japan_map_data/Japan/todofuken.rds\")\n```\n:::\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-11_e40a00446578e06603c9babc5e45cbfb'}\n\n```{.r .cell-code}\nmlit1 = read_rds(\"~/Lab_Data/Japan_map_data/Japan/todofuken.rds\")\n```\n:::\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-12_98773ebbc9fbf6fea56bde8cef95bfc2'}\n\n```{.r .cell-code}\nmlit1 |> ggplot() + geom_sf()\n```\n\n::: {.cell-output-display}\n![](maps_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## 調査地点のデータを準備する\n\n形上湾アマモ場調査のステーションの GPS `tibble` を準備する。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-13_f7120c06c5c6f3d47df0797518e16a84'}\n\n```{.r .cell-code}\nzostera = read_csv(\"~/Lab_Data/matsumuro/Katagami_Bay/longlat_info.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 105 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): eelgrass\ndbl  (4): Name, lat, long, coverage(%)\ndttm (1): datetime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nzostera |> print(n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 105 × 6\n   Name   lat  long datetime            eelgrass `coverage(%)`\n  <dbl> <dbl> <dbl> <dttm>              <chr>            <dbl>\n1     1  33.0  130. 2021-05-25 09:14:48 absent               0\n2     2  33.0  130. 2021-05-25 09:30:32 absent               0\n3     3  33.0  130. 2021-05-25 09:37:16 present              5\n# … with 102 more rows\n```\n:::\n:::\n\n\n`zostera` に緯度経度を設定する。\nCRS は `mlit` と同じにします。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-14_d00427105c7b1a6665f03251ad050f17'}\n\n```{.r .cell-code}\nzostera = zostera |> st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(mlit))\nzostera |> print(n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 105 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 129.7845 ymin: 32.90032 xmax: 129.806 ymax: 32.95375\nGeodetic CRS:  JGD2011\n# A tibble: 105 × 5\n   Name datetime            eelgrass `coverage(%)`            geometry\n* <dbl> <dttm>              <chr>            <dbl>         <POINT [°]>\n1     1 2021-05-25 09:14:48 absent               0 (129.7985 32.95375)\n2     2 2021-05-25 09:30:32 absent               0 (129.7987 32.95258)\n3     3 2021-05-25 09:37:16 present              5  (129.7963 32.9519)\n# … with 102 more rows\n```\n:::\n:::\n\n\n## 九州データの抽出\n\n九州のデータと長崎のデータを抽出します。\n**重要：長崎の名前が誤っています。`Nagasaki` のはずが、`Naoasaki` として記録されています。**\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-15_936d3ca768f4db2e8c558bac786afccf'}\n\n```{.r .cell-code}\ntoget = \"長崎|福岡|大分|佐賀|熊本|鹿児島|宮崎\"\nkyushu = mlit1 |> filter(str_detect(N03_001, toget))\n```\n:::\n\n\n海岸線のデータ (`mlit`) から長崎の情報を抽出したいが、このデータの位置情報はコードで記述されています。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-16_41290abc06f90571d1d55f7659cb5892'}\n\n```{.r .cell-code}\nadmincode = readxl::read_xlsx(\"~/Lab_Data/Japan_map_data/AdminiBoundary_CD.xlsx\", skip = 2)\nadmincode = admincode |> select(code = matches(\"行政\"), N03_001 = matches(\"都道府県*.*漢字\"))\ncodes = admincode |> filter(str_detect(N03_001, \"長崎\")) |> pull(code)\n```\n:::\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-17_9a6680f4f8ee19b31cb34ac4cb23f8fa'}\n\n```{.r .cell-code}\nnagasaki = mlit |> filter(str_detect(C23_001, str_c(codes, collapse = \"|\"))) \n```\n:::\n\n\n長崎の海岸線は次のようになります。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-18_0bc26970f13ff304ce6b3286bad66844'}\n\n```{.r .cell-code}\nggplot() + geom_sf(data = nagasaki)\n```\n\n::: {.cell-output-display}\n![](maps_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n九州は `mlit1` から抽出したので、都道府県政策区域として作図されます。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-19_e34c457da7bdfceeaa10706554601da8'}\n\n```{.r .cell-code}\nggplot() + geom_sf(data = kyushu)\n```\n\n::: {.cell-output-display}\n![](maps_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n長崎をハイライトしましょう。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-20_6ddd234d35e119030af28ca990cff374'}\n\n```{.r .cell-code}\nkyushu |> \n  mutate(fillme = str_detect(N03_001, \"長崎\")) |> \n  ggplot() + geom_sf(aes(fill = fillme), color = NA) +\n  guides(fill = \"none\") +\n  scale_fill_viridis_d() +\n  theme(panel.background = element_rect(fill = \"lightblue\", color = \"black\"),\n        axis.line = element_blank())\n```\n\n::: {.cell-output-display}\n![](maps_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nこの図には、違和感を感じるので、山口、島根、愛媛、広島と高知も追加します。\nそしれ、最初に作った `kyushu` の範囲を抽出しておきます。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-21_8395ac99b16377a7f1735e7b5b261b96'}\n\n```{.r .cell-code}\nkbbox = kyushu |> st_bbox()\n```\n:::\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-22_f5f48ce6f70d0d39493438c5a8035d59'}\n\n```{.r .cell-code}\ntoget = \"長崎|福岡|大分|佐賀|熊本|鹿児島|宮崎|山口|島根|愛媛|高知|広島\"\nkyushu = mlit1 |> filter(str_detect(N03_001, toget))\n```\n:::\n\n\n\n長崎、九州、その他の色分けをして、 `kyushu` をクロップします。\nクロップ範囲は `kbbox` です。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-23_8f8df04a1fcf33b41d80cf9b482604b0'}\n\n```{.r .cell-code}\nkyushu = kyushu |>\n  mutate(fillme = case_when(str_detect(N03_001, \"長崎\") ~ \"Nagasaki\",\n                            str_detect(N03_001, \"福岡|大分|佐賀|熊本|鹿児島|宮崎\") ~ \"Kyushu\",\n                            TRUE ~ \"Honshu\")) |> \n  st_crop(kbbox)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout all\ngeometries\n```\n:::\n:::\n\n\nこの地図は次のようになりました。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-24_9663809e49dd29ae09cf115b17a22222'}\n\n```{.r .cell-code}\nggplot(kyushu) + \n  geom_sf(aes(fill = fillme), color = NA) +\n  guides(fill = \"none\") +\n  coord_sf(expand = FALSE) +\n  scale_fill_viridis_d() +\n  theme(panel.background = element_rect(fill = \"lightblue\", color = \"black\"),\n        axis.line = element_blank())\n```\n\n::: {.cell-output-display}\n![](maps_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n## 調査地点の図\n\n形上湾と大村湾の図を作ります。\n形上湾の方には、調査地点と結果ものせます。\nまずは形上湾と大村湾の範囲を決めます。\n範囲は Google Map で選びました。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-25_f05a0e7310291ea5b0076892a9eba932'}\n\n```{.r .cell-code}\nkatagami = rbind(c(32.95809069048365, 129.7669185309373),\n                 c(32.89802000729197, 129.82832411747583)) |>\n  as_tibble(.name_repair = ~c(\"lat\", \"long\")) |> \n  st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(kyushu))\n\nomurabay = rbind(rev(c(33.103196388120104, 129.67183787501082)),\n                 rev(c(32.817013859622804, 130.03298144413574))) |> \n  as_tibble(.name_repair = \\(x) c(\"long\", \"lat\")) |>\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(kyushu))\n```\n:::\n\n\nここで、それぞれの湾のデータを `kyushu` からぬきます。\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-26_5b69b2893b2292efca2c1b87a9d23326'}\n\n```{.r .cell-code}\nomurabay_area = kyushu |> filter(str_detect(N03_001, \"長崎\")) |> st_crop(st_bbox(omurabay)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout all\ngeometries\n```\n:::\n\n```{.r .cell-code}\nkatagami_area = kyushu |> filter(str_detect(N03_001, \"長崎\")) |> st_crop(st_bbox(katagami)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout all\ngeometries\n```\n:::\n:::\n\n\nアマモの被度データの simple features データを準備します。\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-27_aa640de87ce0db2b098e5b7e66725701'}\n\n```{.r .cell-code}\nzostera = zostera |>\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(kyushu)) |> \n  rename(coverage = matches(\"cover\")) |> \n  mutate(rank = cut(coverage, \n                    c(-Inf, 1, 10, 40, 70, Inf),\n                    labels = c(\"E\", \"D\", \"C\", \"B\", \"A\"))) |> \n  mutate(rank = factor(rank, \n                       levels = LETTERS[1:5],\n                       labels = LETTERS[1:5]))\n```\n:::\n\n\n九州の図を先につくります。\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-28_a1d96f83519e0f38f420feb7a1877acd'}\n\n```{.r .cell-code}\n# The main plot of kyushu\npmain = ggplot(kyushu) + \n  geom_sf(aes(fill = fillme), color = NA) +\n  guides(fill = \"none\") +\n  coord_sf(expand = FALSE) +\n  scale_fill_viridis_d() +\n  theme(panel.grid = element_blank(),\n        panel.background = element_rect(fill = \"lightblue\", color =\"black\"),\n        panel.border  = element_rect(fill = NA, color =\"black\"),\n        plot.background =  element_rect(fill = NA, color =NA),\n        axis.title = element_blank(),\n        axis.line = element_blank())\n```\n:::\n\n\n大村湾と形上湾の図を次に作りますが、先にラベルの tibble を準備します。\n`tibble` の `long` と `lat` のデータは試行錯誤で来ました。\nもっといい方法はあるはずです。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-29_e6f6d2f36571341311483620d014d0fb'}\n\n```{.r .cell-code}\n# Build plots for Omura Bay and Katagami Bay.\ntmp1 = omurabay_area |> st_transform(crs = st_crs(6677)) |> st_bbox()\ntmp2 = katagami_area |> st_transform(crs = st_crs(6677)) |> st_bbox()\n# tibble for labeling figures. The long and lat are by trial-and-error.\n# Need to find a better method.\nlabel1 = tibble(long = tmp1[3] -2500,\n                lat = tmp1[2] +1700,\n                label = \"Omura Bay, Nagasaki, Japan\") |> \n  st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(6677), agr = \"constant\") |> \n  st_transform(crs = st_crs(omurabay_area))\n\nlabel2 = tibble(long = tmp2[1] +800,\n                lat = tmp2[4] -150,\n                label = \"Katagami Bay, Nagasaki, Japan\") |> \n  st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(6677), agr = \"constant\") |> \n  st_transform(crs = st_crs(omurabay_area))\n```\n:::\n\n\nでは、大村湾と形上湾の地図をつくります。\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-30_091ae6add89b2d5c21834d02c5b6d78a'}\n\n```{.r .cell-code}\npomura = ggplot() +\n  geom_sf(fill = \"grey50\", data = omurabay_area, size = 0) +\n  geom_sf_text(aes(label = label), \n               data = label1,\n               color = \"white\",\n               family = \"notosans\", \n               fontface = \"bold\",\n               vjust = 1, hjust = 1,\n               size = 5)  + \n  coord_sf(expand = FALSE) +\n  annotation_north_arrow(style = north_arrow_minimal(text_family = \"notosans\", \n                                                     text_face = \"bold\",\n                                                     line_width = 2,\n                                                     text_size = 20),\n                         pad_y = unit(0.3, \"npc\")) + \n  theme(panel.background = element_rect(fill = \"lightblue\", color =\"black\"),\n        panel.border  = element_rect(fill = NA, color =\"black\"),\n        plot.background =  element_rect(fill = \"white\", color =NA),\n        axis.title = element_blank(),\n        axis.line = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank())\n\npkatagami = ggplot() +\n  geom_sf(fill = \"grey50\", data = katagami_area, size = 0) +\n  geom_sf(aes(fill = rank), data = zostera,\n          pch = 21, size = 3,\n          color = \"white\", stroke = 1) +\n  geom_sf_text(aes(label = label), \n               data = label2,\n               color = \"white\",\n               family = \"notosans\", \n               fontface = \"bold\",\n               vjust = 1.0, hjust = 0.0,\n               size = 5)  + \n  annotation_north_arrow(style = north_arrow_minimal(text_family = \"notosans\", \n                                                     text_face = \"bold\",\n                                                     line_width = 2,\n                                                     text_size = 20)) + \n  coord_sf(expand = FALSE, crs = st_crs(katagami_area)) +\n  scale_fill_viridis_d(end = 0.8) +\n  theme(panel.grid = element_blank(),\n        panel.background = element_rect(fill = \"lightblue\", color =\"black\"),\n        panel.border  = element_rect(fill = NA, color =\"black\"),\n        plot.background =  element_rect(fill = \"white\", color =NA),\n        axis.title = element_blank(),\n        axis.line = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank())\n```\n:::\n\n\n`patchwork` のパッケージをつかって、図を組み立てます。\n図は PDF に保存したら、`magick` を使って、PNGにも変換します。\n\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-31_a5a58edc0207634e70167ff37ee7c209'}\n\n```{.r .cell-code}\npout = pmain + (pomura / pkatagami)\npdfname = \"Images/katagami-map-v1.pdf\"\npngname = str_replace(pdfname, \"pdf\", \"png\")\nggsave(pdfname, plot= pout, width = 300, height = 300, units = \"mm\")\nimage_read_pdf(pdfname, density = 600) |> image_trim() |> image_border(color = \"white\") |> image_write(pngname)\n```\n:::\n\n::: {.cell hash='maps_cache/html/unnamed-chunk-32_ff80f6f40283886cf6b87f0749108f66'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data\n\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data\n```\n:::\n:::\n\n::: {.cell hash='maps_cache/html/final-figure_f155b7b002e76a88cabbb47eaf4671be'}\n::: {.cell-output-display}\n![](maps_files/figure-html/final-figure-1.png){width=3278}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}