{
  "hash": "9b30d5601c8c395e4db1127b2fa2a751",
  "result": {
    "markdown": "---\ntitle: \"非線形モデル-I\"\nformat: \n  html:\n    html-math-method: katex\nreference-location: margin\ncitation-location: margin\nbibliography: references.bib\n---\n\n\nここで紹介する非線形モデルは、海洋生物科学実験III用に準備しました。\n光合成光曲線の解析を紹介します。\n\n## 必要なパッケージ\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.4.0 \n✔ readr   2.1.2      ✔ forcats 0.5.1 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(googlesheets4)\nlibrary(ggcorrplot)\nlibrary(patchwork)\nlibrary(minpack.lm)\nlibrary(nlstools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'nlstools' has been loaded.\n\nIMPORTANT NOTICE: Most nonlinear regression models and data set examples\nrelated to predictive microbiolgy have been moved to the package 'nlsMicrobio'\n```\n:::\n\n```{.r .cell-code}\nlibrary(broom)\n```\n:::\n\n\n\n## データの読み込み\n\nデータは Google Drive に共有しています。\n`googlesheets4` のパッケージをつかて、データをクラウドからダウンロードできます。\nリンクをクリックしたら、ブラウザからもダウンロードできます。\nデータは共有制限なしで公開したので、authentication なしでアクセスできます。\nこのときは `gs4_deauth()` を実行します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngs4_deauth()\n```\n:::\n\n\nGoogle Drive で共有したデータは次のURLの通りです。\nリンクは実験日１〜３の google sheets に飛びます。\n\n* [実験日 1](https://docs.google.com/spreadsheets/d/1CsY7ILKZRFlwQEIzSgu1veMQ964IPVegIJOo04lIGVE/edit#gid=1846404397)\n* [実験日 2](https://docs.google.com/spreadsheets/d/1yeC-rJdxdiVa_icoNHZ1xrt4HWHyGCeQMnUt1r2_hnk/edit#gid=540001236)\n* [実験日 3](https://docs.google.com/spreadsheets/d/1Im8Qg-ukk8uh_3z4H6IwirTc4nhxPqKrDWrjhK4gZ0o/edit#gid=2099964525)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspreadsheet1 = \"https://docs.google.com/spreadsheets/d/1CsY7ILKZRFlwQEIzSgu1veMQ964IPVegIJOo04lIGVE/edit#gid=1846404397\"\nspreadsheet2 = \"https://docs.google.com/spreadsheets/d/1yeC-rJdxdiVa_icoNHZ1xrt4HWHyGCeQMnUt1r2_hnk/edit#gid=540001236\" \nspreadsheet3 = \"https://docs.google.com/spreadsheets/d/1Im8Qg-ukk8uh_3z4H6IwirTc4nhxPqKrDWrjhK4gZ0o/edit#gid=2099964525\"\n```\n:::\n\n\n公開した google sheets にはつぎのスプレッドシートが入っています。\n\n* 光合成データ\n* 海藻資料データ\n* 光環境データ\n\nデータの読み込みは `read_sheet()` で行います。\n各シートの構造は同じにしたので、`map()` をつかって一度にデータを読み込みます。\n`fnames` 変数は解析に使わないので、`select(-fnames)` で外します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmgldata = tibble(fnames = c(spreadsheet1, spreadsheet2, spreadsheet3), day = 1:3) |> \n  mutate(data = map(fnames, read_sheet, sheet = \"光合成データ\")) |> \n  select(-fnames)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"Photosynthesis_Lab_Day_1_2018\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range ''光合成データ''.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"Photosynthesis_Lab_Day_2_2018\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range ''光合成データ''.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"Photosynthesis_Lab_Day_3_2018\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range ''光合成データ''.\n```\n:::\n\n```{.r .cell-code}\nseaweed = tibble(fnames = c(spreadsheet1, spreadsheet2, spreadsheet3), day = 1:3) |> \n  mutate(data = map(fnames, read_sheet, sheet = \"海藻資料データ\"))|> \n  select(-fnames)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"Photosynthesis_Lab_Day_1_2018\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range ''海藻資料データ''.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"Photosynthesis_Lab_Day_2_2018\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range ''海藻資料データ''.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"Photosynthesis_Lab_Day_3_2018\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range ''海藻資料データ''.\n```\n:::\n\n```{.r .cell-code}\nlightdata = tibble(fnames = c(spreadsheet1, spreadsheet2, spreadsheet3), day = 1:3) |> \n  mutate(data = map(fnames, read_sheet, sheet = \"光環境データ\"))|> \n  select(-fnames)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"Photosynthesis_Lab_Day_1_2018\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range ''光環境データ''.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"Photosynthesis_Lab_Day_2_2018\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range ''光環境データ''.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"Photosynthesis_Lab_Day_3_2018\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range ''光環境データ''.\n```\n:::\n:::\n\n\n### 光環境データの処理\n\n光条件毎の (`light`) 光量子量 (`ppfd`) の平均値を求めます。\n`アルミホイル` の光条件のときの光量子量は測っていないが、`ppfd` は 0 とします。\n`アルミホイル` のときのデータはコードとして定義して、追加します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlightdata = lightdata |> \n  unnest(data) |> \n  select(day,\n         han = \"班\",\n         light = \"光環境\",\n         sample = matches(\"サンプル\"),\n         ppfd = matches(\"光量子\")) |> \n  group_by(day, light) |> \n  summarise(ppfd = mean(ppfd))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'day'. You can override using the `.groups`\nargument.\n```\n:::\n:::\n\n\nアルミホイルのデータを定義し、`tmp` に入れます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp = tibble(light = rep(\"アルミホイル\",3), \n             ppfd =  rep(0, 3),\n             day = 1:3)\n```\n:::\n\n\n観測したデータと `tmp` を縦に結合します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlightdata = bind_rows(lightdata, tmp) |> \n  mutate(light = factor(light), day = factor(day))\n```\n:::\n\n\n### 全データを結合\n\n光合成データ `mgldata` と海藻資料データ `seaweed` を結合します。\n`matches()` は `select()` の *selection helper function* です。\n`matches()` にわたした正規表現 (regular expression) とマッチ (match) した変数（列名）が返ってきます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmgldata = mgldata |> unnest(data) |> \n  select(day,\n         han = \"班\",\n         sample = matches(\"サンプル\"),\n         min = matches(\"時間\"),\n         mgl = matches(\"酸素\"),\n         temperature = matches(\"水温\"),\n         light = matches(\"光環境\"),\n         seaweed = matches(\"海藻\"))\n\nseaweed = seaweed |> unnest(data) |> \n  select(day,\n         seaweed = matches(\"海藻\"),\n         han = \"班\",\n         sample = matches(\"サンプル\"),\n         vol = matches(\"容量\"),\n         gww = matches(\"湿重量\"))\n\nmgldata = full_join(mgldata, seaweed, by = c(\"han\", \"sample\", \"day\"))\n```\n:::\n\n\n`han`, `sample`, `day` は `as.factor()` を通して因子に変換します。\n`across()` は複数変数に同じ関数を適応したいときにつかいます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmgldata = mgldata |> mutate(across(c(han, sample, day), as.factor))\n```\n:::\n\n\n`across()` を使わずに変換するなら、次通りです。\n\n::: {.cell}\n\n```{.r .cell-code}\nmgldata = mgldata |>\n  mutate(han = as.factor(han), sample = as.factor(sample), day = as.factor(day))\n```\n:::\n\n\n結合したら，溶存酸素濃度の時間変動を可視化します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mgldata) +\n  geom_point(aes(x = min, y = mgl, color = han)) +\n  facet_grid(rows = vars(light),\n             cols = vars(seaweed))\n```\n\n::: {.cell-output-display}\n![](nonlinear_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n光の調整は編み袋 (ネット) でやっています。\nネットの枚数が増えると光量子量が下がります。\nアルミホイルで光量子量が 0 の条件を作っています。\nネットがないとき (最も明るいとき) 溶存酸素濃度が顕著に増加しましたが、アルミホイルのときは緩やかに減少しました。\n\n### 光合成速度を求める\n\n複数データ群から光合成速度を計算したいので、`map()` 関数を通して行います。\n`map()` に渡す光合成速度用関数を定義します。\n`fit_model()` は線形モデルを溶存酸素濃度時系列データに当てはめ用です。\n`get_rate()` は 2 つのモデル係数 $(y = b_0+ b_1 x)$ から傾き $(b_1)$ を抽出します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_model = function(df) {\n  lm(mgl ~ min, data = df)\n}\nget_rate = function(m) {\n  coefficients(m)[2] \n}\n```\n:::\n\n\nここでデータをグループ化して、グループ毎の傾きを求めます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmgldata = \n  mgldata |> \n  group_nest(day, han, sample, light, gww, vol, seaweed) |> \n  mutate(model = map(data, fit_model)) |> \n  mutate(rate = map_dbl(model, get_rate)) |> \n  mutate(stats = map(model, glance)) |> \n  unnest(stats) \n```\n:::\n\n\n求めた係数と環境データを結合します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalldata = full_join(mgldata, lightdata, by = c(\"day\", \"light\"))\n```\n:::\n\n\n係数は湿重量を実験容器の容積で割って、湿重量あたりの純光合成速度を求めます。\nここで、係数の単位は mg O~2~ l^-1^ min^-1^ から mg O~2~ g~ww~^{-1}min^-1^ に変わります。\n\n単位の求め方：\n\n$$\n\\overbrace{\\frac{mg\\;\\text{O}_2}{l}}^{\\text{酸素濃度}} \\times \\underbrace{\\frac{1}{g_{ww}}}_{\\text{湿重量}} \\times \\overbrace{ml}^{\\text{容積}} \\times \\frac{1 \\;l}{1000\\; ml} \\times \\frac{1000\\;\\mu g\\;\\text{O}_2}{1\\;mg\\;\\text{O}_2}\n$$\nR コード：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalldata = \n  alldata |> \n  mutate(normalized_rate = rate / gww * vol)\n```\n:::\n\n\n解析をする前に、光量子量、種、班ごとの平均値を求めます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset = \n  alldata |> \n  group_by(ppfd, seaweed, han) |> \n  summarise(np = mean(normalized_rate))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'ppfd', 'seaweed'. You can override using\nthe `.groups` argument.\n```\n:::\n:::\n\n\n標準化した光合成速度は次の通りです。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxlabel = expression(paste(\"PPFD\"~(mu*mol~m^{-2}~s^{-1})))\nylabel = '\"Net photosynthesis rate\"~(mu*g~O[2]~g[ww]^{-1}~min^{-1})'\nylabel = as.expression(parse(text = ylabel))\ndataset |> \n  ggplot() + \n  geom_point(aes(x = ppfd, y = np, color = han)) +\n  scale_color_viridis_d(\"\", end = 0.8) +\n  scale_x_continuous(xlabel) +\n  scale_y_continuous(ylabel) +\n  facet_grid(col = vars(seaweed)) \n```\n\n::: {.cell-output-display}\n![ウミトラノオ、コブクロモク、ホンダワラ属海藻の幼体の光合成速度。記号の色はそれぞれの班を示しています。光合成速度のばらつきは光量子量があると大きくなるのが明らかです。](nonlinear_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## モデルの当てはめ\n\n非線形モデルの当てはめに便利な `nlstools` パッケージを使います。\n当てはめたいモデルは次のとおりです。\n\n$$\n\\overbrace{P_{net}}^{\\text{純光合成速度}} = \\underbrace{P_{max}\\left(1 - \\exp\\left(-\\frac{\\alpha}{P_{max}}I\\right)\\right)}_{\\text{総光合成速度}} - \\overbrace{R_d}^{\\text{暗呼吸速度}}\n$$\n\n* $P_{net}$ は純光合成速度 (`normalized_rate`)\n* $I$ は光量子量 (`ppfd`)\n* $P_{max}$ は光合成飽和速度 (`pmax`)\n* $\\alpha$ は初期勾配 (`alpha`)\n* $R_d$ は暗呼吸速度 (`rd`)\n\nこのモデルをR関数に書き換えると次のようになります。\n\n\n::: {.cell}\n\n```{.r .cell-code}\npecurve = function(ppfd, pmax, rd, alpha) {\n  pmax * (1-exp(-alpha / pmax * ppfd)) - rd\n}\n```\n:::\n\n\n`nlstools` の `preview()` 関数をつかって，モデル当てはめ用の関数 (`nls()`) に必要なの初期値を探します。\n`variable` 引数に `ppfd` 変数の位置情報を渡してください。\nこの位置情報は `tibble` 変数（列）の順位です。\nこのデータの場合、`ppfd` は 1 列目なので、`variable = 1` を `preview()` に渡しています。\n`str_detect()` も `matches()` と同じように正規表現をつかって、 `seaweed` 変数からマッチしたものを返します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSTART = list(pmax = 10, rd = 3, alpha = 0.3)\n\ncrispifolium = dataset |> filter(str_detect(seaweed, \"コブクロ\"))\nthunbergii   = dataset |> filter(str_detect(seaweed, \"ウミトラノオ\"))\njuvenile     = dataset |> filter(str_detect(seaweed, \"幼体\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npreview(np ~ pecurve(ppfd, pmax, rd, alpha), \n        data = crispifolium, \n        variable = 1,\n        start = START)\n```\n\n::: {.cell-output-display}\n![](nonlinear_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nRSS:  167 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npreview(np ~ pecurve(ppfd, pmax, rd, alpha), \n        data = thunbergii, \n        variable = 1,\n        start = START)\n```\n\n::: {.cell-output-display}\n![](nonlinear_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nRSS:  501 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npreview(np ~ pecurve(ppfd, pmax, rd, alpha), \n        data = juvenile, \n        variable = 1,\n        start = START)\n```\n\n::: {.cell-output-display}\n![](nonlinear_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nRSS:  246 \n```\n:::\n:::\n\n\n`+` 記号がデータの中心に通る用になったら，そのときの初期値を `nls()` または、`minpack.lm` パッケージの `nlsLM()` 関数に渡してモデルの当てはめをします。\n`nls()` 関数は Gauss-Newton アルゴリズムによってパラメータ推定をしますが、`nlsLM()` は Levenberg-Marquardt アルゴリズムを用います。\nLevenberg-Marquardt法のほうが優秀ですが、モデルの組み方によって使えないときがあります。\n\nここではデータを海藻毎に当てはめるので、解析関数をつくります。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_nls = function(df) {\n  START = list(pmax = 14, rd = 3, alpha = 0.3)\n  # nls(np ~ pecurve(ppfd, pmax, rd, alpha),  data = df, start = START)\n  nlsLM(np ~ pecurve(ppfd, pmax, rd, alpha),  data = df, start = START)\n}\n\ndataset = dataset |> ungroup() |> \n  group_nest(seaweed) |>\n  mutate(model = map(data, fit_nls))\ndataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  seaweed                    data model \n  <chr>        <list<tibble[,3]>> <list>\n1 ウミトラノオ           [24 × 3] <nls> \n2 コブクロモク           [24 × 3] <nls> \n3 幼体                   [24 × 3] <nls> \n```\n:::\n:::\n\n\n当てはめたモデルの結果は次の通りです。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset = dataset |> \n  mutate(summary =map(model, glance)) |> \n  unnest(summary)\ndataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 12\n  seaweed     data model sigma isConv  finTol logLik   AIC   BIC devia…¹ df.re…²\n  <chr>   <list<t> <lis> <dbl> <lgl>    <dbl>  <dbl> <dbl> <dbl>   <dbl>   <int>\n1 ウミト… [24 × 3] <nls>  2.51 TRUE   1.49e-8  -54.5 117.  122.    132.       21\n2 コブク… [24 × 3] <nls>  2.21 TRUE   1.49e-8  -51.5 111.  116.    103.       21\n3 幼体    [24 × 3] <nls>  1.31 TRUE   1.49e-8  -39.0  86.0  90.7    36.2      21\n# … with 1 more variable: nobs <int>, and abbreviated variable names ¹​deviance,\n#   ²​df.residual\n```\n:::\n:::\n\n\n次はモデルの期待値を求めます。\nこの関数は期待値を擬似データから計算します。\n擬似データは `tibble()` で作っています。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_fitted = function(data, model) {\n  N = 21 # 擬似データの長さ\n  ndata = tibble(ppfd = seq(min(data$ppfd), max(data$ppfd),length = N))\n  tmp = predict(model, newdata = ndata) |> as_tibble()\n  bind_cols(ndata,tmp)\n}\n\ndataset = dataset |> mutate(fitted = map2(data, model, calc_fitted))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_point(aes(x = ppfd, y = np), data = unnest(dataset, data))+\n  geom_line(aes(x = ppfd, y = value), data = unnest(dataset, fitted)) +\n  facet_grid(rows = vars(seaweed))\n```\n\n::: {.cell-output-display}\n![観測とモデル期待値。](nonlinear_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n## 診断図\n\n線形モデルと同様に、モデルを当てはめたら、残渣の診断図も確認します。\nここでは残渣 (residuals) とモデル期待値 (fitted) を求めます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshindan = dataset |> \n  select(seaweed, data, model) |> \n  mutate(residuals = map(model, residuals)) |> \n  mutate(fitted = map(model, fitted)) |> \n  select(seaweed, data, residuals, fitted) |> \n  unnest(everything())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1 = ggplot(shindan) +\n  geom_point(aes(x = fitted, y = residuals,\n                 color = seaweed),\n             size = 3) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  scale_color_viridis_d(end = 0.8)\n\np2 = ggplot(shindan) +\n  geom_point(aes(x = fitted, y = sqrt(abs(residuals)),\n                 color = seaweed),\n             size = 3) +\n  scale_color_viridis_d(end = 0.8)\np1+p2\n```\n\n::: {.cell-output-display}\n![モデル残渣と残渣の絶対値の平方根の図で、モデルの当てはめの良さが分かります。（左）はモデル残渣対期待値です。期待値が増加するとモデル残渣の散らばりが大きくなるのがはっきりしています。点線 (0) の周りを均一にばらつくのが理想です。（右）は残渣の絶対値の平方根です。期待値が上がると残渣が増加しています。これらの図を確認すると、残渣のばらつきの均一性に問題があります。](nonlinear_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## パラメータの集計\n\n残渣プロットの結果はひどかったが、とりあえず、光飽和点 $(I_k)$ と光補償点 $(I_c)$ を求めましょう。\n\n* 光飽和点：$I_k = P_{max} / \\alpha$ \n* 光補償点：$I_c = \\frac{P_{max}}{\\alpha} \\ln\\left(\\frac{P_{max}}{P_{max} - R_d}\\right)$\n\n\nまずは係数を抽出するための関数を定義します。\nモデルの定義によって、`cfs` からパラメータを抽出すろときのコードが変わります。\n`pecurve()` を定義したときに、`pmax`, `alpha`, `rd` がパラメータ名だったので、\n抽出には `\"pmax\"`, `\"alpha\"`, `\"rd\"`  の文字列を使いました。\n文字列はパラメータ名と一致するようにしましょう。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_cfs = function(m) {\n  cfs = coef(m)\n  tibble(pmax = cfs[\"pmax\"],\n         alpha = cfs[\"alpha\"],\n         rd = cfs[\"rd\"])\n}\n```\n:::\n\n\nここで光飽和点と光補償点を求めるための関数を定義します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_ik = function(m) {\n  # 光飽和点\n  cfs = coef(m)\n  cfs[\"pmax\"] / cfs[\"alpha\"]*log(cfs[\"pmax\"]/(cfs[\"pmax\"] - cfs[\"rd\"]))\n}\ncalc_ic = function(m) {\n  # 光補償点\n  cfs = coef(m)\n  cfs[\"pmax\"] / cfs[\"alpha\"]\n}\n```\n:::\n\n\n`map()` を使って係数を求めます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelcfs = dataset |> \n  select(seaweed, model) |> \n  mutate(cfs = map(model, get_cfs)) |> \n  mutate(ik = map(model, calc_ik)) |> \n  mutate(ic = map(model, calc_ic)) |> \n  unnest(c(ik, ic, cfs))\nmodelcfs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 7\n  seaweed      model   pmax  alpha    rd    ik    ic\n  <chr>        <list> <dbl>  <dbl> <dbl> <dbl> <dbl>\n1 ウミトラノオ <nls>  23.3  0.0858 2.08  25.4  271. \n2 コブクロモク <nls>   5.24 0.165  0.431  2.74  31.8\n3 幼体         <nls>   4.50 0.0718 0.827 12.7   62.7\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> 海藻類 </th>\n   <th style=\"text-align:right;\"> P~max~ </th>\n   <th style=\"text-align:right;\"> α </th>\n   <th style=\"text-align:right;\"> R~d~ </th>\n   <th style=\"text-align:right;\"> I~k~ </th>\n   <th style=\"text-align:right;\"> I~c~ </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ウミトラノオ </td>\n   <td style=\"text-align:right;\"> 23.3 </td>\n   <td style=\"text-align:right;\"> 0.086 </td>\n   <td style=\"text-align:right;\"> 2.1 </td>\n   <td style=\"text-align:right;\"> 25.4 </td>\n   <td style=\"text-align:right;\"> 271.4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> コブクロモク </td>\n   <td style=\"text-align:right;\"> 5.2 </td>\n   <td style=\"text-align:right;\"> 0.165 </td>\n   <td style=\"text-align:right;\"> 0.4 </td>\n   <td style=\"text-align:right;\"> 2.7 </td>\n   <td style=\"text-align:right;\"> 31.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 幼体 </td>\n   <td style=\"text-align:right;\"> 4.5 </td>\n   <td style=\"text-align:right;\"> 0.072 </td>\n   <td style=\"text-align:right;\"> 0.8 </td>\n   <td style=\"text-align:right;\"> 12.7 </td>\n   <td style=\"text-align:right;\"> 62.7 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### モデル係数表について\n\n\nモデル係数の統計量は `summary()` または `nlstools` の `overview()` で見れます。\n`Estimate` はモデル係数の期待値です。\n`Std. Error` は係数の標準誤差です。\n`t value` と `Pr(>|t|)` は 0 に対して、モデル係数の t 値と t 値の P 値です。\nこの係数結果に出力されたものが Wald's test の結果です。\nすべての海藻類に対して、$P_{max} = 0$ の帰無仮説を棄却できますが、\n$R_d = 0$ の帰無仮説は棄却できません。\nコブクロモクと幼体の $\\alpha = 0$ の帰無仮説は棄却できないが、ウミトラノオの場合は棄却できました。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset |> \n  mutate(summary = map(model, summary)) |> \n  pull(summary, name = seaweed)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$ウミトラノオ\n\nFormula: np ~ pecurve(ppfd, pmax, rd, alpha)\n\nParameters:\n      Estimate Std. Error t value Pr(>|t|)    \npmax  23.28655    5.72475   4.068 0.000553 ***\nrd     2.07666    1.27193   1.633 0.117440    \nalpha  0.08580    0.02415   3.553 0.001883 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.506 on 21 degrees of freedom\n\nNumber of iterations to convergence: 9 \nAchieved convergence tolerance: 1.49e-08\n\n\n$コブクロモク\n\nFormula: np ~ pecurve(ppfd, pmax, rd, alpha)\n\nParameters:\n      Estimate Std. Error t value Pr(>|t|)   \npmax    5.2410     1.3996   3.745  0.00119 **\nrd      0.4315     1.2211   0.353  0.72736   \nalpha   0.1646     0.1069   1.539  0.13862   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.212 on 21 degrees of freedom\n\nNumber of iterations to convergence: 7 \nAchieved convergence tolerance: 1.49e-08\n\n\n$幼体\n\nFormula: np ~ pecurve(ppfd, pmax, rd, alpha)\n\nParameters:\n      Estimate Std. Error t value Pr(>|t|)    \npmax   4.50104    0.92297   4.877 8.02e-05 ***\nrd     0.82731    0.69152   1.196   0.2449    \nalpha  0.07176    0.03480   2.062   0.0518 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.314 on 21 degrees of freedom\n\nNumber of iterations to convergence: 10 \nAchieved convergence tolerance: 1.49e-08\n```\n:::\n:::\n\n\n\n## 多重比較\n\n数種類のデータ群に、一つのモデルを当てはめたら、群毎に推定したパラメータの違いが気になります。\n複数群をお互いに比較することは多重比較といいます。\n一般的には、\n群毎にパラメータを推定する full model から群毎のデータをまとめて、一つのパラメータを推定する pooled model まで考えられます。\nこのとき、`nlsLM()` は使用できないので、`nls()` 関数を使います。\n`nls()` の収束を助けるために、まずは pooled model の `nlsLM()` の結果を full model のパラメータ初期値にします。\n\nでは、データをすこし整理します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset = dataset |> select(seaweed, data) |> unnest(data)\ndataset = dataset |> mutate(seaweed = factor(seaweed))\n```\n:::\n\n\nフルモデル (full model) の場合は群毎に、$P_{max}$、$\\alpha$、$R_d$ を推定します。\nプールモデル (pooled model) の場合は、群の区別をせず、1 セットのパラメータを推定します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# フルモデルの初期値を求める\npoolmodel = nlsLM(np ~ pecurve(ppfd, pmax, rd, alpha), \n                  start = list(pmax = 10, rd = 3, alpha = 0.3),\n                  data = dataset, \n                  lower = c(pmax = 0, rd = 0, alpha = 0))\n```\n:::\n\n\n`nlsLM()` は次のようにインデックスされた係数のモデルに対応していないので、`nls()` を使います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSTART = lapply(coef(poolmodel), rep, 3)\nfullmodel = nls(np ~ pecurve(ppfd, pmax[seaweed], rd[seaweed], alpha[seaweed]), \n                start = START, \n                data = dataset)\n```\n:::\n\n\nAIC を確認すると、フルモデルの AIC が最も低いです。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAIC(poolmodel, fullmodel) |> as_tibble(rownames = \"model\") |> arrange(AIC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  model        df   AIC\n  <chr>     <dbl> <dbl>\n1 fullmodel    10  320.\n2 poolmodel     4  353.\n```\n:::\n:::\n\n\nすべてのモデルを当てはめて、AIC で比較することはできます。\n3 変数・3 群のモデルの組み方は $(3(3-1)/2)^3=125$ とおりも考えられます。\n125とおりのモデルを調べたくないので、Wald's 検定でパラメータ比較をします。\n\n::: .rmdnote\n**【重要】：ここで評価したフルモデルと海藻毎に当てはめたモデルのモデル係数に期待値は同じじゃない！**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fullmodel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFormula: np ~ pecurve(ppfd, pmax[seaweed], rd[seaweed], alpha[seaweed])\n\nParameters:\n       Estimate Std. Error t value Pr(>|t|)    \npmax1  23.28613    4.73717   4.916 6.64e-06 ***\npmax2   5.24099    1.31169   3.996 0.000172 ***\npmax3   4.50104    1.45692   3.089 0.002983 ** \nrd1     2.07673    1.05259   1.973 0.052890 .  \nrd2     0.43151    1.14443   0.377 0.707404    \nrd3     0.82730    1.09158   0.758 0.451339    \nalpha1  0.08580    0.01999   4.293 6.20e-05 ***\nalpha2  0.16462    0.10022   1.643 0.105444    \nalpha3  0.07176    0.05493   1.306 0.196200    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.073 on 63 degrees of freedom\n\nNumber of iterations to convergence: 14 \nAchieved convergence tolerance: 5.833e-06\n```\n:::\n:::\n\n\n\n推定した係数の違いはモデルの構造と関係しています。\nそれぞれの海藻に当てはめたとき、それぞれの海藻のモデルごとに独立した誤差項が存在するが、\n上のフルモデルの場合 1 つの誤差項しかないです。\n\nつまり、それぞれの海藻にはつぎのモデルを当てはめたので、$\\sigma$ 3 つ存在します。\nこれで、係数の期待値と標準誤差がきまります。\n\n$$\n\\begin{aligned}\n\\mu &= P_{max} \\left(1 - \\exp\\left(-\\frac{\\alpha}{P_{max}}I\\right)\\right)-R_d  \\\\\nP_{net} & \\sim N(\\mu, \\sigma)\n\\end{aligned}\n$$\nフルモデルは次のようになります。\n\n$$\n\\begin{aligned}\n\\mu_i &= P_{max,i} \\left(1 - \\exp\\left(-\\frac{\\alpha_{i}}{P_{max,i}}I\\right)\\right)-R_{d,i}  \\\\\nP_{net,i} & \\sim N(\\mu_i, \\sigma)\n\\end{aligned}\n$$\n$i$ は海藻を区別するためのインデックス。\nこのモデルには 1 つの $\\sigma$ しかないです。\n\nこの微妙な違いで、係数の期待値と標準誤差が変わります。\n\n:::\n\n\nパラメータの多重比較は\n[`aomisc`](https://github.com/OnofriAndreaPG/aomisc/)\nのパッケージが有ると楽です。\nインストール方法は `remotes` パッケージをつかって、github からインストールします。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"onofriAndreaPG/aomisc\")\n```\n:::\n\n\n`aomisc` パッケージの多重比較は Holm法を使います。\n\n> Holm 法は p 値を小さい順になれべてから実施します。\n> 最も小さい P 値の有意水準は $\\alpha / N$ です。\n> $N$ は比較する回数です。\n> ここで $P \\leq \\alpha / N$ なら、\n> 次の P 値を  $\\alpha / (N-1)$ で評価します。\n> $P > \\alpha / (N-1)$ なら、ここで検定が終わります。\n> 帰無仮説を棄却できないまで、$N-k$ の補正で P 値を評価続けます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(aomisc)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: drc\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: MASS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'MASS'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:patchwork':\n\n    area\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    select\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'drc' has been loaded.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nPlease cite R and 'drc' if used for a publication,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nfor references type 'citation()' and 'citation('drc')'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'drc'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    gaussian, getInitial\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: plyr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n------------------------------------------------------------------------------\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nYou have loaded plyr after dplyr - this is likely to cause problems.\nIf you need functions from both plyr and dplyr, please load plyr first, then dplyr:\nlibrary(plyr); library(dplyr)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n------------------------------------------------------------------------------\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'plyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:dplyr':\n\n    arrange, count, desc, failwith, id, mutate, rename, summarise,\n    summarize\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    compact\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: car\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: carData\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'car'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    recode\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    some\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: multcompView\n```\n:::\n\n```{.r .cell-code}\ncfs = summary(fullmodel)$coef\ndf = summary(fullmodel)$df\n```\n:::\n\n\n`pmax` の多重比較は次のとおりです。\n3つ目の比較まで評価しました\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrows = 1:3\npairComp(cfs[rows,1], cfs[rows,2],dfr = df[2], adjust = \"holm\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$pairs\n\n\t Simultaneous Tests for General Linear Hypotheses\n\nLinear Hypotheses:\n                 Estimate Std. Error t value Pr(>|t|)   \npmax1-pmax2 == 0   18.045      4.915   3.671  0.00102 **\npmax1-pmax3 == 0   18.785      4.956   3.790  0.00102 **\npmax2-pmax3 == 0    0.740      1.960   0.377  0.70711   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n(Adjusted p values reported -- holm method)\n\n\n$Letters\n           Mean       SE CLD\npmax1 23.286128 4.737174   a\npmax2  5.240990 1.311692   b\npmax3  4.501039 1.456917   b\n```\n:::\n:::\n\n\n`alpha`と`rd`の場合、$P > \\alpha/N$ ので、3つ目比較までしません。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrows = 4:6\npairComp(cfs[rows,1], cfs[rows,2],dfr = df[2], adjust = \"holm\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$pairs\n\n\t Simultaneous Tests for General Linear Hypotheses\n\nLinear Hypotheses:\n             Estimate Std. Error t value Pr(>|t|)\nrd1-rd2 == 0   1.6452     1.5549   1.058    0.882\nrd1-rd3 == 0   1.2494     1.5164   0.824    0.882\nrd2-rd3 == 0  -0.3958     1.5815  -0.250    0.882\n(Adjusted p values reported -- holm method)\n\n\n$Letters\n         Mean       SE CLD\nrd1 2.0767329 1.052591   a\nrd2 0.4315057 1.144426   a\nrd3 0.8273007 1.091576   a\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrows = 7:9\npairComp(cfs[rows,1], cfs[rows,2],dfr = df[2], adjust = \"holm\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$pairs\n\n\t Simultaneous Tests for General Linear Hypotheses\n\nLinear Hypotheses:\n                   Estimate Std. Error t value Pr(>|t|)\nalpha1-alpha2 == 0 -0.07882    0.10219  -0.771        1\nalpha1-alpha3 == 0  0.01404    0.05846   0.240        1\nalpha2-alpha3 == 0  0.09286    0.11428   0.813        1\n(Adjusted p values reported -- holm method)\n\n\n$Letters\n             Mean         SE CLD\nalpha1 0.08579966 0.01998607   a\nalpha2 0.16461744 0.10021636   a\nalpha3 0.07175792 0.05493227   a\n```\n:::\n:::\n\n\n`aomisc` パッケージを読み込むと、`drc` と `MASS` パッケージも同時に読み込まれます。\n`tidyverse` を読み込んだあとに、`MASS` パッケージを読み込むと `MASS` の `select()` 関数が定義され、\n`tidyverse` の `select()` が使えなくなります。\n`aomisc` は不要になったので、次の 3 つのパッケージをディタッチ (detach, unload) します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetach(package:aomisc)\ndetach(package:drc)\ndetach(package:MASS)\n```\n:::\n\n\n## モデル係数の相関関係\n\n上で多重比較をしましたが、非線形モデルのパラメータはお互いとの相関関係が強いことが多いです。\nこのとき、多重比較にバイアス (bias) が入り、フェアな比較はできません。\n光合成光曲線の解析から推定したパラメータの相関関係は次の図の通りです。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfm_cov  = vcov(fullmodel) # モデルパラメータの分散共分散行列\nfm_corr = cov2cor(fm_cov) # モデルパラメータの相関行列\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvname1 = str_c(c(\"pmax\", \"alpha\", \"rd\"), \"1\")\nvname2 = str_c(c(\"pmax\", \"alpha\", \"rd\"), \"2\")\nvname3 = str_c(c(\"pmax\", \"alpha\", \"rd\"), \"3\")\np1 = ggcorrplot(fm_corr[vname1, vname1],     type = \"upper\", show.diag = T, lab =T)\np2 = ggcorrplot(fm_corr[vname2, vname2], type = \"upper\", show.diag = T, lab = T)\np3 = ggcorrplot(fm_corr[vname3, vname3], type = \"upper\", show.diag = T, lab = T)\np1 + p2 + p3 + plot_layout(ncol = 1)\n```\n\n::: {.cell-output-display}\n![光合成光曲線の解析からもとめたパラメータの相関関係を示しています。種ごとにまとめて、3つの相関プロットに示した。（右）ウミトラノオ、（中）コブクロモク、（左）幼体。相関係数は -1 から　1 をとります。ウミトラノオ以外の場合では、パラメータごとの関係に正の相関があります。](nonlinear_files/figure-html/unnamed-chunk-46-1.png){width=90%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvname1 = str_c(c(\"pmax\", \"alpha\", \"rd\"), \"1\")\nvname2 = str_c(c(\"pmax\", \"alpha\", \"rd\"), \"2\")\nvname3 = str_c(c(\"pmax\", \"alpha\", \"rd\"), \"3\")\np1 = ggcorrplot(fm_cov[vname1, vname1],     type = \"upper\", show.diag = T, lab =T, legend.title = \"Cov\")\np2 = ggcorrplot(fm_cov[vname2, vname2], type = \"upper\", show.diag = T, lab = T, legend.title = \"Cov\")\np3 = ggcorrplot(fm_cov[vname3, vname3], type = \"upper\", show.diag = T, lab = T, legend.title = \"Cov\")\np1 + p2 + p3 + plot_layout(ncol = 1)\n```\n\n::: {.cell-output-display}\n![光合成光曲線の解析からもとめたパラメータの共分散を示しています。種ごとにまとめて、3つの共分散プロットに示した。（右）ウミトラノオ、（中）コブクロモク、（左）幼体。分散は正の値しか取れませんが、共分散は負の値をとっても大丈夫です。ウミトラノオの場合は負の値になっています。](nonlinear_files/figure-html/unnamed-chunk-47-1.png){width=90%}\n:::\n:::\n\n\nモデル係数はお互いに独立していないことが明確ですね。\nこれにより、Wald's 検定の結果はそのまま受け入れないほうがいいです。\n\n## ガウス誤差伝播法\n\nガウス誤差伝播法 (Gaussian error propagation, GEP) は直接推定したパラメータ（係数）から\n間接的に求めたパラメータの誤差を推定するための手法です。\nGEP においては、誤差が正規分布に従うことと、パラメータ推定にバイアスがないことが条件です。\nところがほとんどのモデルは、この条件を満たしていません。\nそれにしても、推定した誤差がパラメータ期待値の 10% を下回れば、信頼できる結果と考えられます。\n\nGEPを実施するには、つぎの式を応用します。\n$\\sigma_f^2$ は間接的に求めたパラメータ $f$ の分散です。\n$g$ は間接的に求めたパラメータ $f$ の偏微分方程式の行列です。\n$V$ は直接推定したパラメータの分散共分散行列です。\n\n$$\n\\sigma_f^2 = \\mathbf{g}^T\\mathbf{V}\\mathbf{g}\n$$\n$$\n\\mathbf{g} = \n\\begin{bmatrix}\n\\frac{\\partial f}{\\partial \\beta_x}\\\\\n\\frac{\\partial f}{\\partial \\beta_y}\\\\\n\\frac{\\partial f}{\\partial \\beta_z}\\\\\n\\end{bmatrix}\n$$\n\n\n$$\n\\mathbf{V} =\n\\begin{bmatrix}\n\\sigma_{xx}^2 & \\sigma_{xy}^2 & \\sigma_{xz}^2 \\\\\n\\sigma_{xy}^2 & \\sigma_{yy}^2 & \\sigma_{yz}^2 \\\\\n\\sigma_{xz}^2 & \\sigma_{yz}^2 & \\sigma_{zz}^2 \\\\\n\\end{bmatrix}\n$$\n\n$$\n\\sigma_f^2 = \n\\begin{bmatrix}\n\\frac{\\partial f}{\\partial \\beta_x}& \n\\frac{\\partial f}{\\partial \\beta_y}&\n\\frac{\\partial f}{\\partial \\beta_z}\\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n\\sigma_{xx}^2 & \\sigma_{xy}^2 & \\sigma_{xz}^2 \\\\\n\\sigma_{xy}^2 & \\sigma_{yy}^2 & \\sigma_{yz}^2 \\\\\n\\sigma_{xz}^2 & \\sigma_{yz}^2 & \\sigma_{zz}^2 \\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n\\frac{\\partial f}{\\partial \\beta_x}\\\\ \n\\frac{\\partial f}{\\partial \\beta_y}\\\\\n\\frac{\\partial f}{\\partial \\beta_z}\\\\\n\\end{bmatrix}\n$$\n\n$$\n\\begin{aligned}\n\\sigma_f^2 &= \n\\frac{\\partial f}{\\partial \\beta_x}\\left(\\frac{\\partial f}{\\partial \\beta_x}\\sigma_{xx}^2 +\\frac{\\partial f}{\\partial \\beta_y}\\sigma_{xy}^2 +\\frac{\\partial f}{\\partial \\beta_z}\\sigma_{xz}^2\\right) \\\\\n{} &+ \n\\frac{\\partial f}{\\partial \\beta_y}\\left(\\frac{\\partial f}{\\partial \\beta_x}\\sigma_{xy}^2 +\\frac{\\partial f}{\\partial \\beta_y}\\sigma_{yy}^2 +\\frac{\\partial f}{\\partial \\beta_z}\\sigma_{yz}^2\\right) \\\\\n{} &+\n\\frac{\\partial f}{\\partial \\beta_z}\\left(\\frac{\\partial f}{\\partial \\beta_x}\\sigma_{xz}^2 +\\frac{\\partial f}{\\partial \\beta_y}\\sigma_{yz}^2 +\\frac{\\partial f}{\\partial \\beta_z}\\sigma_{zz}^2\\right) \n\\end{aligned}\n$$\n\n$$\n\\begin{aligned}\n\\sigma_f^2 &= \n\\left(\\frac{\\partial f}{\\partial \\beta_x}\\right)^2\\sigma_{xx}^2 + \n\\frac{\\partial f}{\\partial \\beta_x}\\frac{\\partial f}{\\partial \\beta_y}\\sigma_{xy}^2 +\n\\frac{\\partial f}{\\partial \\beta_x}\\frac{\\partial f}{\\partial \\beta_z}\\sigma_{xz}^2 \\\\\n{} & +\n\\left(\\frac{\\partial f}{\\partial \\beta_y}\\right)^2\\sigma_{yy}^2 + \n\\frac{\\partial f}{\\partial \\beta_y}\\frac{\\partial f}{\\partial \\beta_x}\\sigma_{xy}^2 +\n\\frac{\\partial f}{\\partial \\beta_y}\\frac{\\partial f}{\\partial \\beta_z}\\sigma_{yz}^2 \\\\\n{} &+\n\\left(\\frac{\\partial f}{\\partial \\beta_z}\\right)^2\\sigma_{zz}^2 + \n\\frac{\\partial f}{\\partial \\beta_z}\\frac{\\partial f}{\\partial \\beta_x}\\sigma_{xz}^2 +\n\\frac{\\partial f}{\\partial \\beta_z}\\frac{\\partial f}{\\partial \\beta_y}\\sigma_{yz}^2 \n\\end{aligned}\n$$\n\n$$\n\\begin{aligned}\n\\sigma_f^2 &= \n\\left(\\frac{\\partial f}{\\partial \\beta_x}\\right)^2\\sigma_{xx}^2 + \n\\left(\\frac{\\partial f}{\\partial \\beta_y}\\right)^2\\sigma_{yy}^2 + \n\\left(\\frac{\\partial f}{\\partial \\beta_z}\\right)^2\\sigma_{zz}^2 \\\\\n{} &+ \n2\\left(\\frac{\\partial f}{\\partial \\beta_x}\\frac{\\partial f}{\\partial \\beta_y}\\sigma_{xy}^2 +\n\\frac{\\partial f}{\\partial \\beta_x}\\frac{\\partial f}{\\partial \\beta_z}\\sigma_{xz}^2 +\n\\frac{\\partial f}{\\partial \\beta_y}\\frac{\\partial f}{\\partial \\beta_z}\\sigma_{yz}^2 \\right)\n\\end{aligned}\n$$\n\n\n\n\n\n参考文献：\n\n* Tellinghuisen J. 2000. Statistical error propagation. Journal of Physical Chemistry A 104: 2834 - 2844.\n* Tellinghuisen J. 2001. Statistical error propagation. Journal of Physical Chemistry A 105: 3917 - 3921.\n* Lo E. 2005. Gaussian error propagation applied to ecological data: Post-ice-storm-downed woody biomass. Ecological Monographs 75: 451-466.\n\n$$\n\\sigma_f^2=\\sum_{i = 1}^n \\left(\\frac{\\partial q}{\\partial x_i}\\sigma_{x_i}\\right)^2 + 2\\sum_{i = 1}^n\\sum_{j = 1,j\\neq i}^n \\left(\\frac{\\partial q}{\\partial x_i}\\frac{\\partial q}{\\partial x_j}\\rho_{x_i x_j}\\sigma_{x_i}\\sigma_{x_j}\\right) \n$$\n\n共分散と相関の関係は次の通りです。\n\n$$\n\\overbrace{\\rho_{xy}}^\\text{相関}= \\overbrace{\\sigma_{xy}}^\\text{共分散} / \\underbrace{(\\sigma_x\\sigma_y)}_{x,y\\;\\text{の標準偏差}}\n$$\n\nでは、Rで解析に使ったモデルの偏微分方程式を求めます。\n光飽和点 $(I_k)$ と光補償点 $(I_c)$ の `formula` は次のように定義します。\n\n$$\n\\begin{aligned}\nI_k & = f_1 = P_{max} / \\alpha \\\\\nI_c & = f_2 = \\frac{P_{max}}{\\alpha} \\ln\\left(\\frac{P_{max}}{P_{max} - R_d}\\right) \\\\\n\\end{aligned}\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfic = ic ~ pmax/alpha\nfik = ik ~ pmax/alpha * log(pmax/(pmax - rd))\n```\n:::\n\n\n`fic` と `fik` は 3つの要素で組み立てられた formula です。\nたとえば、`fic`の場合は次のようになっています。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(fic)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"formula\"\n```\n:::\n\n```{.r .cell-code}\nlength(fic)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nfic[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n`~`\n```\n:::\n\n```{.r .cell-code}\nfic[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nic\n```\n:::\n\n```{.r .cell-code}\nfic[[3]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npmax/alpha\n```\n:::\n:::\n\n\nそれぞれの偏微分方程式は次のとおりになります。\n\n光補償点 $(f_1)$ の場合、 $P_{max}$ と $\\alpha$ に対する式は次のとおりです。\n\n$$\n\\begin{aligned}\n\\frac{\\partial f_1}{\\partial \\alpha} &= \\frac{-P_{max}}{\\alpha^2} \\\\\n\\frac{\\partial f_1}{\\partial P_{max}} &= \\frac{1}{\\alpha} \\\\\n\\end{aligned}\n$$\n\n\n光飽和点 $(f_2)$ の場合、$R_d$　もあるので式は次のとおりです。\n\n$$\n\\begin{aligned}\n\\frac{\\partial f_2}{\\partial \\alpha} &= -\\frac{P_{max}}{\\alpha^2} \\log\\left(\\frac{P_{max}}{P_{max} - R_d}\\right) \\\\\n\\frac{\\partial f_2}{\\partial P_{max}} &= \\frac{1}{\\alpha} \\log\\left(\\frac{P_{max}}{P_{max} - R_d}\\right) \n+ \\left(\\frac{1}{\\alpha} - \\frac{P_{max}}{P_{max}-R_d}\\right) \\\\\n\\frac{\\partial f_2}{\\partial R_{d}} &= \\frac{P_{max}}{\\alpha\\,(P_{max}-R_d)} \\\\\n\\end{aligned}\n$$\nRでは、次の関数をつかって、光合成光曲線の光補償点と光飽和点の誤差を求めます。\n関数に `rlang` パッケージの関数をつかています。\n\n\n::: {.cell}\n\n```{.r .cell-code}\npropagate_error = function(model, dmodel, parameters) {\n  require(rlang)  \n  cfs = coefficients(model)    # モデル係数の期待値\n  vars = all.vars(dmodel[[3]]) # 偏微分方程式の対象となる変数\n  V = vcov(model)              # 当てはめたモデルの分散共分散行列\n  \n  V = V[parameters, parameters] # 必要な分散共分散の抽出\n  expectation = cfs[parameters] # 必要な期待値の抽出\n  \n  # 偏微分方程式はここで求めています。\n  gradient_fn = deriv(dmodel[[3]], vars, function.arg = T)\n  ff = expr(gradient_fn(!!!syms(vars)))\n  tmp =  exprs(!!!expectation)\n  tmp = set_names(tmp, vars)\n    for(i in 1:length(vars)) {\n    call2(\"=\", expr(!!vars[i]), expectation[i]) |> eval()\n  }\n  G = eval(ff)\n  G = attributes(G)$gradient |> matrix(ncol = 1)\n  \n  # g^T V g\n  sqrt((t(G) %*% V) %*% G)\n}\n```\n:::\n\n\n\n直接推定したモデル係数を抽出して、期待値と標準誤差だけ残します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncfsout = summary(fullmodel)$coef |> as_tibble(rownames = \"parameter\") |> \n  select(parameter, est=Estimate, se = `Std. Error`) |> \n  mutate(id = str_extract(parameter, \"[0-9]\"),\n         parameter = str_extract(parameter, \"[A-z]+\")) |> \n  pivot_wider(names_from = parameter,\n              values_from = c(est, se),\n              names_glue = \"{.value}_{parameter}\")\n```\n:::\n\n\n間接的に推定したパラメータを追加します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncnames = c(\"Seaweed\", \"Parameter\", \"Estimate\", \"SE\")\ncfsout = cfsout |> \n  mutate(est_ic = est_pmax / est_alpha,\n         est_ik = est_pmax / est_alpha * log(est_pmax / (est_pmax - est_rd))) |> \n  mutate(pmax = str_c(\"pmax\", id),\n         alpha = str_c(\"alpha\", id),\n         rd = str_c(\"rd\", id),\n         seaweed = c(\"ウミトラノオ\", \"コブクロモク\", \"幼体\"))\n```\n:::\n\n\n`propagate_error()` をそれぞれの海藻に適応します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply_propagate_error_fic = function(pmax, alpha, rd) {\n    fic = ic ~ pmax / alpha\n    propagate_error(fullmodel, fic, c(pmax, alpha))\n}\n\napply_propagate_error_fik = function(pmax, alpha, rd) {\n  fik = ik ~ pmax / alpha * log(pmax / (pmax - rd))\n    propagate_error(fullmodel, fik, c(pmax, alpha, rd))\n}\n\ncfsout = cfsout |> \n  mutate(se_ic = pmap_dbl(list(pmax, alpha, rd), apply_propagate_error_fic)) |> \n  mutate(se_ik = pmap_dbl(list(pmax, alpha, rd), apply_propagate_error_fik)) |> \n           select(-alpha, -pmax, -rd) |> \n  pivot_longer(cols = matches(\"est_|se_\"),\n               names_to = c(\"stat\", \"par\"),\n               names_pattern = \"(est|se)_(.*)\") |> \n  pivot_wider(names_from = stat, values_from = value) |> \n  arrange(par, id) |> \n  select(-id)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: rlang\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'rlang'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:purrr':\n\n    %@%, as_function, flatten, flatten_chr, flatten_dbl, flatten_int,\n    flatten_lgl, flatten_raw, invoke, splice\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncfsout |> \n  kableExtra::kbl(digits = c(0,0,3,2),\n                  col.names = cnames)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Seaweed </th>\n   <th style=\"text-align:left;\"> Parameter </th>\n   <th style=\"text-align:right;\"> Estimate </th>\n   <th style=\"text-align:right;\"> SE </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ウミトラノオ </td>\n   <td style=\"text-align:left;\"> alpha </td>\n   <td style=\"text-align:right;\"> 0.086 </td>\n   <td style=\"text-align:right;\"> 0.02 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> コブクロモク </td>\n   <td style=\"text-align:left;\"> alpha </td>\n   <td style=\"text-align:right;\"> 0.165 </td>\n   <td style=\"text-align:right;\"> 0.10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 幼体 </td>\n   <td style=\"text-align:left;\"> alpha </td>\n   <td style=\"text-align:right;\"> 0.072 </td>\n   <td style=\"text-align:right;\"> 0.05 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ウミトラノオ </td>\n   <td style=\"text-align:left;\"> ic </td>\n   <td style=\"text-align:right;\"> 271.401 </td>\n   <td style=\"text-align:right;\"> 109.63 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> コブクロモク </td>\n   <td style=\"text-align:left;\"> ic </td>\n   <td style=\"text-align:right;\"> 31.837 </td>\n   <td style=\"text-align:right;\"> 17.59 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 幼体 </td>\n   <td style=\"text-align:left;\"> ic </td>\n   <td style=\"text-align:right;\"> 62.725 </td>\n   <td style=\"text-align:right;\"> 49.15 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ウミトラノオ </td>\n   <td style=\"text-align:left;\"> ik </td>\n   <td style=\"text-align:right;\"> 25.353 </td>\n   <td style=\"text-align:right;\"> 9.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> コブクロモク </td>\n   <td style=\"text-align:left;\"> ik </td>\n   <td style=\"text-align:right;\"> 2.735 </td>\n   <td style=\"text-align:right;\"> 6.34 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 幼体 </td>\n   <td style=\"text-align:left;\"> ik </td>\n   <td style=\"text-align:right;\"> 12.739 </td>\n   <td style=\"text-align:right;\"> 11.54 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ウミトラノオ </td>\n   <td style=\"text-align:left;\"> pmax </td>\n   <td style=\"text-align:right;\"> 23.286 </td>\n   <td style=\"text-align:right;\"> 4.74 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> コブクロモク </td>\n   <td style=\"text-align:left;\"> pmax </td>\n   <td style=\"text-align:right;\"> 5.241 </td>\n   <td style=\"text-align:right;\"> 1.31 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 幼体 </td>\n   <td style=\"text-align:left;\"> pmax </td>\n   <td style=\"text-align:right;\"> 4.501 </td>\n   <td style=\"text-align:right;\"> 1.46 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ウミトラノオ </td>\n   <td style=\"text-align:left;\"> rd </td>\n   <td style=\"text-align:right;\"> 2.077 </td>\n   <td style=\"text-align:right;\"> 1.05 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> コブクロモク </td>\n   <td style=\"text-align:left;\"> rd </td>\n   <td style=\"text-align:right;\"> 0.432 </td>\n   <td style=\"text-align:right;\"> 1.14 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 幼体 </td>\n   <td style=\"text-align:left;\"> rd </td>\n   <td style=\"text-align:right;\"> 0.827 </td>\n   <td style=\"text-align:right;\"> 1.09 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n",
    "supporting": [
      "nonlinear_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}